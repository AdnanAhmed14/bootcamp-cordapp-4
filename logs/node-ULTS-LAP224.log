[INFO ] 2019-09-22T12:16:11,136Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-121609.981/custom-cordapp_1_4_d3ab2422-48ca-4300-89e7-cf450cca8224.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:16:11,287Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-121609.981/custom-cordapp_1_4_d3ab2422-48ca-4300-89e7-cf450cca8224.jar {}
[INFO ] 2019-09-22T12:16:11,431Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T12:19:47,043Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-121946.006/custom-cordapp_1_4_43643870-af18-4f4b-b7d2-47e0a6b808bc.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:19:47,140Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-121946.006/custom-cordapp_1_4_43643870-af18-4f4b-b7d2-47e0a6b808bc.jar {}
[INFO ] 2019-09-22T12:19:47,270Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-22T12:19:49,590Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:49,603Z [Test worker] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2019-09-22T12:19:50,909Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:50,951Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:50,957Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:50,976Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:50,980Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:50,987Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:19:50,988Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9B9ED5DE425FFE5410BB8964EEC9D0558FA19CABC9BAD89D5F8869A108FA259B. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero input
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:19:50,996Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:51,000Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:51,007Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:19:51,008Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 9B9ED5DE425FFE5410BB8964EEC9D0558FA19CABC9BAD89D5F8869A108FA259B. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero input
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:19:51,046Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:51,058Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:52,564Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:19:52,568Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-09-22T12:21:36,636Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-122135.584/custom-cordapp_1_4_70ea8d82-dec8-4273-b10e-e6ad1350f63f.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:21:36,743Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-122135.584/custom-cordapp_1_4_70ea8d82-dec8-4273-b10e-e6ad1350f63f.jar {}
[INFO ] 2019-09-22T12:21:36,884Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-22T12:21:39,130Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:39,146Z [Test worker] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2019-09-22T12:21:40,355Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,376Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,380Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,400Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,403Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,410Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:21:40,410Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F4FF54EEF8B5FF78E08FAA9027B711F7E676F095880299F4FEFB8A92BF5DCCC7. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero input
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:21:40,417Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,420Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,425Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:21:40,426Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction F4FF54EEF8B5FF78E08FAA9027B711F7E676F095880299F4FEFB8A92BF5DCCC7. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero input
	at bootcamp.TokenContract.verify(TokenContract.java:16) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:21:40,464Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:40,486Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:41,669Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:21:41,673Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-09-22T12:22:33,351Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-122232.319/custom-cordapp_1_4_8e68e93d-765c-4e18-b52e-fcc9c9c1b05f.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:22:33,470Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-122232.319/custom-cordapp_1_4_8e68e93d-765c-4e18-b52e-fcc9c9c1b05f.jar {}
[INFO ] 2019-09-22T12:22:33,596Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T12:24:56,064Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-122454.986/custom-cordapp_1_4_eab56822-7d2b-4d77-9350-16ed7c6ac85f.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:24:56,192Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-122454.986/custom-cordapp_1_4_eab56822-7d2b-4d77-9350-16ed7c6ac85f.jar {}
[INFO ] 2019-09-22T12:24:56,328Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T12:31:28,825Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-123127.792/custom-cordapp_1_4_8d4d5ede-c843-4023-ad5d-a00c5e745334.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:31:28,949Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-123127.792/custom-cordapp_1_4_8d4d5ede-c843-4023-ad5d-a00c5e745334.jar {}
[INFO ] 2019-09-22T12:31:29,081Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-22T12:31:31,462Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:31,467Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:31,501Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:31,501Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:32,879Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:32,882Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:31:32,903Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 0882AF3DD511162DE7D43A95BAFFEA0E3E68D6A29EAECC2A1A0D5EFE2F16104B. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one input
	at bootcamp.TokenContract.verify(TokenContract.java:18) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:31:32,912Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:32,916Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:31:32,916Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 0882AF3DD511162DE7D43A95BAFFEA0E3E68D6A29EAECC2A1A0D5EFE2F16104B. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one input
	at bootcamp.TokenContract.verify(TokenContract.java:18) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:31:32,958Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:32,981Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:34,203Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:31:34,209Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-09-22T12:37:01,253Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-123700.262/custom-cordapp_1_4_1d3a7dea-d0bd-4df9-8bcc-bde2169d6d8b.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:37:01,373Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-123700.262/custom-cordapp_1_4_1d3a7dea-d0bd-4df9-8bcc-bde2169d6d8b.jar {}
[INFO ] 2019-09-22T12:37:01,508Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-22T12:37:03,807Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:37:03,846Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:37:05,378Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:37:05,400Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction A05DE601B3299DD7AD3340F3D69CCA17EDA6753974188E0A16747F2084A80826. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Must Have one command.
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:37:05,408Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:37:05,409Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction A05DE601B3299DD7AD3340F3D69CCA17EDA6753974188E0A16747F2084A80826. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Must Have one command.
	at bootcamp.TokenContract.verify(TokenContract.java:20) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:37:05,457Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:37:05,472Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:37:06,643Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:37:06,646Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-09-22T12:56:15,584Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-125614.620/custom-cordapp_1_4_17ae75b4-0847-4563-ae94-3c07c5a82c97.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:56:15,694Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-125614.620/custom-cordapp_1_4_17ae75b4-0847-4563-ae94-3c07c5a82c97.jar {}
[INFO ] 2019-09-22T12:56:15,826Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-22T12:56:18,079Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:18,093Z [Test worker] contracts.AttachmentConstraint.warnOnce - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2019-09-22T12:56:19,395Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:56:19,420Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 4533C329FA9BA44D48017EBD6908463804F35D694C6F8A9BBA04849D9A419EC1. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Command must be issue command.
	at bootcamp.TokenContract.verify(TokenContract.java:34) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter.recordTransactionWithTransactionMap(TestDSL.kt:257) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestLedgerDSLInterpreter._unverifiedTransaction(TestDSL.kt:295) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.input(TransactionDSLInterpreter.kt:150) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:31) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:56:19,425Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:19,425Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:19,452Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:19,453Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:19,463Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:56:19,463Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 80080FAA47E5CFDB4440C5C5E889E3E596769154286DBB697377727B113FE81D. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero input
	at bootcamp.TokenContract.verify(TokenContract.java:22) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:56:19,466Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:19,470Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:19,474Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:56:19,474Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction 80080FAA47E5CFDB4440C5C5E889E3E596769154286DBB697377727B113FE81D. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero input
	at bootcamp.TokenContract.verify(TokenContract.java:22) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:56:19,514Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:19,534Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:20,614Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:20,620Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-09-22T12:56:34,783Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-125633.673/custom-cordapp_1_4_db17140f-8cfa-4131-b7a9-c621f5ebac32.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T12:56:34,889Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/generated-custom-cordapps/20190922-125633.673/custom-cordapp_1_4_db17140f-8cfa-4131-b7a9-c621f5ebac32.jar {}
[INFO ] 2019-09-22T12:56:35,017Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[WARN ] 2019-09-22T12:56:37,274Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:37,310Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:38,526Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:56:38,544Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction D6AC7F26EAC933EDA8C2F5F99DFA595C66CB496FBDEBBA36526257F9A73D0672. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be requied.
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:56:38,550Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:56:38,550Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction D6AC7F26EAC933EDA8C2F5F99DFA595C66CB496FBDEBBA36526257F9A73D0672. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be requied.
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:56:38,582Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:38,595Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:39,672Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:56:39,673Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction EED2FF243E9EE0D32D4391EE58C58BDDC02E39D5240DCC1B860E36A6255C9B99. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be requied.
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:173) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:160) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:128) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:95) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:56:39,678Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2019-09-22T12:56:39,678Z [Test worker] internal.Verifier.verifyContracts - Error validating transaction EED2FF243E9EE0D32D4391EE58C58BDDC02E39D5240DCC1B860E36A6255C9B99. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.0/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be requied.
	at bootcamp.TokenContract.verify(TokenContract.java:44) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:377) ~[corda-core-4.0.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:71) ~[corda-core-4.0.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:125) ~[corda-core-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:139) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:69) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.0.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:214) ~[corda-test-utils-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.0.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.0.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:106) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:66) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[?:?]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:117) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[?:?]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:155) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:137) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[?:?]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[?:?]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[?:?]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_161]
[WARN ] 2019-09-22T12:56:39,716Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:39,732Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:40,323Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:40,328Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:40,354Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:40,365Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:40,983Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2019-09-22T12:56:40,987Z [Test worker] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2019-09-22T17:28:46,341Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\adnanahmed\Documents\bootcamp-cordapp-4 ... {}
[INFO ] 2019-09-22T17:28:56,170Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172840.425\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:28:56,178Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172840.425/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:28:56,216Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172840.425/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:28:56,484Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:28:57,269Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:28:57,348Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:28:57,349Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:28:57,351Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:28:57,524Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:28:40.373Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:02,017Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:02,023Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172840.425\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:02,023Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:02,038Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:02,151Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:02,176Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:04,108Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:04,758Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:04,838Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:04,871Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:04,871Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:05,152Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:05,163Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:05,163Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:05,178Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:05,350Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:05,429Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:05,449Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:05,481Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:05,925Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:05,929Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:29:05,932Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:29:06,249Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:06,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:06,268Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:06,269Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:06,269Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:06,281Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172840.425\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:29:06,282Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172840.425/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:06,282Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172840.425/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:06,497Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:06,526Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:06,579Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:06,579Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:06,579Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:06,584Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:28:40.373Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:07,389Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:07,392Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172840.425\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:07,394Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:07,395Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:07,400Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:07,401Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:07,506Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:07,517Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:07,521Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:07,522Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:07,554Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:07,555Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:07,660Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:07,672Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:07,672Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:07,674Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:07,683Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:07,698Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:07,703Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:07,710Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:07,944Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:07,954Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:07,956Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:07,959Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:07,971Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:07,972Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:07,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:07,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:07,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:07,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:07,992Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172840.425\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:29:07,993Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172840.425/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:07,993Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172840.425/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:08,160Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:08,191Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:08,244Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:08,244Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:08,244Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:08,248Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:28:40.373Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:08,875Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:08,878Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172840.425\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:08,878Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:08,880Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:08,885Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:08,885Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:08,995Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:09,004Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:09,009Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:09,010Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:09,040Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:09,041Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:09,168Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:09,176Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:09,176Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,179Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:09,187Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,201Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:09,204Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,212Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:09,426Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:09,432Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,435Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173345163) {}
[INFO ] 2019-09-22T17:29:09,437Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:09,447Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,450Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:09,459Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173347672) {}
[INFO ] 2019-09-22T17:29:09,460Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:09,470Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,472Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:09,482Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,482Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:09,482Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173349176) {}
[INFO ] 2019-09-22T17:29:09,482Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:29:09,726Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:09,745Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:09,745Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:09,747Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:11,015Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:11,035Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:11,039Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:11,060Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:11,140Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147}
[WARN ] 2019-09-22T17:29:11,153Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,156Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,156Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,212Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,410Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[WARN ] 2019-09-22T17:29:11,416Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,444Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[WARN ] 2019-09-22T17:29:11,467Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,493Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,493Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f501ebc6-216c-4e59-b26f-1ebf8c048544, invocation_id=31e44fa2-f195-48ac-8555-7673d7969cae, invocation_timestamp=2019-09-22T17:29:09.513Z, origin=Only For Testing, session_id=31e44fa2-f195-48ac-8555-7673d7969cae, session_timestamp=2019-09-22T17:29:09.513Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,539Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:11,545Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5e2bd31d, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=bd7eca9c-1ebc-4fcb-8bcd-c906f25c78d4) {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[INFO ] 2019-09-22T17:29:11,546Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] has error [0] {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:11,551Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] error allowed to propagate {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[WARN ] 2019-09-22T17:29:11,587Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] errored, dumping all transitions:

 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.373Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9AF4558D7FA10C0800E4E5E84C6FD92C8DB7EA23FF496AEF58BFE6817FE7F052), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@57ec4e70])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@57ec4e70])
    SignalFlowHasStarted(flowId=[cc30bebc-51fd-4c00-a585-9a40159fa0bb])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5887747047190335871), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8841517311294359162), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5887747047190335871--3447495621749670215-0-0), senderUUID=bd7eca9c-1ebc-4fcb-8bcd-c906f25c78d4))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@57ec4e70]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8841517311294359162): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.376Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.380Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.395Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), maySkipCheckpoint=false, fiber=57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F, )
  Actions: 
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9AF4558D7FA10C0800E4E5E84C6FD92C8DB7EA23FF496AEF58BFE6817FE7F052)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F)


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.407Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8841517311294359162).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.416Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.444Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628, )
  Actions: 
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F
    D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.444Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5887747047190335871), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5887747047190335871--3447495621749670215-2-0), senderUUID=bd7eca9c-1ebc-4fcb-8bcd-c906f25c78d4))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.444Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.468Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.473Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), maySkipCheckpoint=false, fiber=1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC, )
  Actions: 
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628
    1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))])


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.475Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.537Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8841517311294359162), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67]
checkpoint.sessions.SessionId(toLong=-8841517311294359162).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5887747047190335871))
    Ended


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.538Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.539Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.551Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3305278386746388213, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.559Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.561Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[WARN ] 2019-09-22T17:29:11,588Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:29:11,590Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[WARN ] 2019-09-22T17:29:11,644Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] errored, dumping all transitions:

 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.373Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9AF4558D7FA10C0800E4E5E84C6FD92C8DB7EA23FF496AEF58BFE6817FE7F052), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@57ec4e70])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@57ec4e70])
    SignalFlowHasStarted(flowId=[cc30bebc-51fd-4c00-a585-9a40159fa0bb])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5887747047190335871), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8841517311294359162), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5887747047190335871--3447495621749670215-0-0), senderUUID=bd7eca9c-1ebc-4fcb-8bcd-c906f25c78d4))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@57ec4e70]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8841517311294359162): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.376Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.380Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.395Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), maySkipCheckpoint=false, fiber=57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F, )
  Actions: 
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9AF4558D7FA10C0800E4E5E84C6FD92C8DB7EA23FF496AEF58BFE6817FE7F052)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F)


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.407Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-8841517311294359162).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.416Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.444Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628, )
  Actions: 
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    57FF166514B4EF4E4422F18C85B6FAFF2BEF6B16B4DACDCD7B924167652BF73F
    D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.444Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5887747047190335871), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5887747047190335871--3447495621749670215-2-0), senderUUID=bd7eca9c-1ebc-4fcb-8bcd-c906f25c78d4))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.444Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.468Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.473Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), maySkipCheckpoint=false, fiber=1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC, )
  Actions: 
    PersistCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5887747047190335871)), errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    D9CA955EEE38D983BBCEDBF8216566966F543FE7839C320CCA8DDFFC8C62B628
    1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))])


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.475Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.537Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8841517311294359162), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67]
checkpoint.sessions.SessionId(toLong=-8841517311294359162).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5887747047190335871))
    Ended


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.538Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.539Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.551Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3305278386746388213, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.559Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.561Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] ---
  Timestamp: 2019-09-22T17:29:11.633Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3305278386746388213)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)], senderUUID=bd7eca9c-1ebc-4fcb-8bcd-c906f25c78d4)
    CreateTransaction
    RemoveCheckpoint(id=[cc30bebc-51fd-4c00-a585-9a40159fa0bb])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67])
    ReleaseSoftLocks(uuid=cc30bebc-51fd-4c00-a585-9a40159fa0bb)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8841517311294359162)])
    RemoveFlow(flowId=[cc30bebc-51fd-4c00-a585-9a40159fa0bb], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3305278386746388213, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Invocation, sessionId=cf8ebf05-b53a-42cc-adef-2dd605756189, timestamp: 2019-09-22T17:29:11.337Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8841517311294359162)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5887747047190335871--3447495621749670215)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8841517311294359162))]), frozenFiber=1A971B10F0FD8F06C77C1F2F2F574C6C8E5642C87E7B858E869878204A4D54EC), errorState=Errored(errors=[FlowError(errorId=-3305278386746388213, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5e2bd31d, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=bd7eca9c-1ebc-4fcb-8bcd-c906f25c78d4))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@10e44a67]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
[WARN ] 2019-09-22T17:29:11,644Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [cc30bebc-51fd-4c00-a585-9a40159fa0bb] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=cc30bebc-51fd-4c00-a585-9a40159fa0bb, invocation_id=cf8ebf05-b53a-42cc-adef-2dd605756189, invocation_timestamp=2019-09-22T17:29:11.337Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cf8ebf05-b53a-42cc-adef-2dd605756189, session_timestamp=2019-09-22T17:29:11.337Z, thread-id=147, tx_id=E21C8253CDA2F4B5A0D6FE9BA4F67AE6F5226991BD94AB909D19B92468B27B1A}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8841517311294359162) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:12,022Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172911.736\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:29:12,024Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172911.736/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:12,024Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172911.736/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:12,320Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:12,354Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:12,370Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:12,372Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:12,372Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:12,377Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:11.736Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:13,056Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:13,062Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172911.736\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:13,062Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:13,065Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:13,071Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:13,071Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:13,177Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:13,188Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:13,229Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:13,239Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:13,239Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:13,372Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:13,380Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:13,380Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:13,383Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:13,408Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:13,431Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:13,436Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:13,444Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:13,871Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:13,875Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:29:13,875Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:29:13,879Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:13,882Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:13,882Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:13,882Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:13,882Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:13,910Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172911.736\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:29:13,912Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172911.736/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:13,912Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172911.736/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:14,195Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:14,230Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:14,308Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:14,308Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:14,308Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:14,311Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:11.736Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:14,823Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:14,830Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172911.736\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:14,830Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:14,830Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:14,840Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:14,840Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:14,944Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:14,957Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:14,962Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:14,963Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:14,989Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:14,989Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:15,115Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:15,128Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:15,130Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:15,132Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:15,140Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:15,173Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:15,177Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:15,182Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:15,628Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:15,634Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:15,637Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:15,639Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:15,646Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:15,647Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:15,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:15,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:15,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:15,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:15,906Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172911.736\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:29:15,907Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172911.736/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:15,908Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172911.736/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:15,934Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:15,963Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:16,014Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:16,014Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:16,015Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:16,019Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:11.736Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:16,510Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:16,513Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172911.736\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:16,514Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:16,515Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:16,518Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:16,519Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:16,597Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:16,607Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:16,610Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:16,611Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:16,634Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:16,634Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:16,778Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:16,783Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:16,785Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:16,788Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:16,794Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:16,827Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:16,830Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:16,839Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:17,097Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:17,102Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:17,104Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173353380) {}
[INFO ] 2019-09-22T17:29:17,105Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:17,110Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:17,112Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:17,118Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173355128) {}
[INFO ] 2019-09-22T17:29:17,119Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:17,126Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:17,127Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:17,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:17,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:17,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173356783) {}
[INFO ] 2019-09-22T17:29:17,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:29:17,141Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281}
[WARN ] 2019-09-22T17:29:17,144Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281}
[WARN ] 2019-09-22T17:29:17,843Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281}
[WARN ] 2019-09-22T17:29:17,846Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281}
[WARN ] 2019-09-22T17:29:17,848Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281}
[WARN ] 2019-09-22T17:29:17,851Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281}
[WARN ] 2019-09-22T17:29:17,868Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281}
[WARN ] 2019-09-22T17:29:17,882Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:17,882Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:17,882Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:17,903Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:17,959Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[WARN ] 2019-09-22T17:29:17,959Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:17,971Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[WARN ] 2019-09-22T17:29:17,976Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:17,992Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:17,992Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=dc9c7f79-ab46-4fd8-a334-168b2bcc5bda, invocation_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, invocation_timestamp=2019-09-22T17:29:17.136Z, origin=Only For Testing, session_id=e4484c2a-9420-40a6-8e68-cbc121476ee9, session_timestamp=2019-09-22T17:29:17.136Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:18,000Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:18,001Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [24653984-78bd-450a-a1c7-e068c85402b8] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@45dc4229, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=583c3093-f19a-4792-b6ea-5ebd17666d35) {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[INFO ] 2019-09-22T17:29:18,001Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [24653984-78bd-450a-a1c7-e068c85402b8] has error [0] {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:18,001Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [24653984-78bd-450a-a1c7-e068c85402b8] error allowed to propagate {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[WARN ] 2019-09-22T17:29:18,007Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24653984-78bd-450a-a1c7-e068c85402b8] errored, dumping all transitions:

 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.948Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=362ECAAA6024583D99FDF009292F8C658B0D306A989D66983B7404D90AD3B24C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@658ef376])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@658ef376])
    SignalFlowHasStarted(flowId=[24653984-78bd-450a-a1c7-e068c85402b8])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4507925145760130937), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=895772298301758815), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4507925145760130937-8478475891114540422-0-0), senderUUID=583c3093-f19a-4792-b6ea-5ebd17666d35))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@658ef376]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=895772298301758815): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.948Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.948Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.955Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), maySkipCheckpoint=false, fiber=7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A, )
  Actions: 
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=362ECAAA6024583D99FDF009292F8C658B0D306A989D66983B7404D90AD3B24C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A)


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.956Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=895772298301758815).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.960Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.968Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E, )
  Actions: 
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A
    1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.970Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4507925145760130937), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4507925145760130937-8478475891114540422-2-0), senderUUID=583c3093-f19a-4792-b6ea-5ebd17666d35))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.970Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.977Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.981Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), maySkipCheckpoint=false, fiber=5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4, )
  Actions: 
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E
    5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))])


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.981Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.999Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=895772298301758815), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e]
checkpoint.sessions.SessionId(toLong=895772298301758815).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4507925145760130937))
    Ended


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.999Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18.001Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7837109065133470271, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18.001Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18.002Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[WARN ] 2019-09-22T17:29:18,008Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24653984-78bd-450a-a1c7-e068c85402b8] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:29:18,008Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[WARN ] 2019-09-22T17:29:18,020Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24653984-78bd-450a-a1c7-e068c85402b8] errored, dumping all transitions:

 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.948Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=362ECAAA6024583D99FDF009292F8C658B0D306A989D66983B7404D90AD3B24C), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@658ef376])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@658ef376])
    SignalFlowHasStarted(flowId=[24653984-78bd-450a-a1c7-e068c85402b8])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4507925145760130937), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=895772298301758815), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4507925145760130937-8478475891114540422-0-0), senderUUID=583c3093-f19a-4792-b6ea-5ebd17666d35))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@658ef376]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=895772298301758815): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.948Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.948Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.955Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), maySkipCheckpoint=false, fiber=7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A, )
  Actions: 
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=362ECAAA6024583D99FDF009292F8C658B0D306A989D66983B7404D90AD3B24C)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A)


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.956Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=895772298301758815).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.960Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.968Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E, )
  Actions: 
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    7DF21A0551441ABF6C1CAA1C980B0C78AFEB08F59169F4E35ECB30C0EF6A2C9A
    1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.970Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=4507925145760130937), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-4507925145760130937-8478475891114540422-2-0), senderUUID=583c3093-f19a-4792-b6ea-5ebd17666d35))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.970Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.977Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.981Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), maySkipCheckpoint=false, fiber=5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4, )
  Actions: 
    PersistCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=4507925145760130937)), errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    1EABF10F553682B9813FE083613ABDFDCFC21A84C2BCFFEB92EFD331B3C1C96E
    5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))])


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.981Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.999Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=895772298301758815), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e]
checkpoint.sessions.SessionId(toLong=895772298301758815).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=4507925145760130937))
    Ended


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:17.999Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18.001Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7837109065133470271, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18.001Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18.002Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [24653984-78bd-450a-a1c7-e068c85402b8] ---
  Timestamp: 2019-09-22T17:29:18.015Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-7837109065133470271)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)], senderUUID=583c3093-f19a-4792-b6ea-5ebd17666d35)
    CreateTransaction
    RemoveCheckpoint(id=[24653984-78bd-450a-a1c7-e068c85402b8])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e])
    ReleaseSoftLocks(uuid=24653984-78bd-450a-a1c7-e068c85402b8)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=895772298301758815)])
    RemoveFlow(flowId=[24653984-78bd-450a-a1c7-e068c85402b8], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-7837109065133470271, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Invocation, sessionId=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, timestamp: 2019-09-22T17:29:17.935Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=895772298301758815)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-4507925145760130937-8478475891114540422)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=895772298301758815))]), frozenFiber=5A553211E343DC04E71FF579F99D52C269167D244553F257926BF0AAA3A4F3A4), errorState=Errored(errors=[FlowError(errorId=-7837109065133470271, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@45dc4229, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=583c3093-f19a-4792-b6ea-5ebd17666d35))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6ab35b0e]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
[WARN ] 2019-09-22T17:29:18,020Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24653984-78bd-450a-a1c7-e068c85402b8] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=24653984-78bd-450a-a1c7-e068c85402b8, invocation_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, invocation_timestamp=2019-09-22T17:29:17.935Z, origin=O=Mock Company 1, L=London, C=GB, session_id=cc42b7e7-fcdd-40b8-bdfc-6b11566112bc, session_timestamp=2019-09-22T17:29:17.935Z, thread-id=281, tx_id=D8B6AD57CFBE2B2F0E63D618D430CFD1012F2F8B325B7AC62526C817B198CA70}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=895772298301758815) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:18,385Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172918.039\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:29:18,386Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172918.039/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:18,386Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172918.039/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:18,410Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:18,426Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:18,442Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:18,443Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:18,443Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:18,452Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:18.039Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:19,085Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:19,085Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172918.039\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:19,085Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:19,085Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:19,095Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:19,095Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:19,247Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:19,299Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:19,346Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:19,363Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:19,363Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:19,519Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:19,529Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:19,529Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:19,532Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:19,544Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:19,579Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:19,583Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:19,590Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:20,025Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:20,028Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:29:20,028Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:29:20,034Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:20,037Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:20,037Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:20,037Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:20,037Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:20,330Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172918.039\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:29:20,331Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172918.039/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:20,331Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172918.039/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:20,356Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:20,391Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:20,464Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:20,464Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:20,465Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:20,470Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:18.039Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:20,882Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:20,885Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172918.039\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:20,885Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:20,887Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:20,889Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:20,891Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:20,949Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:20,961Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:20,967Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:20,968Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:20,994Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:20,995Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:21,095Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:21,100Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:21,100Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:21,103Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:21,107Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:21,122Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:21,126Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:21,131Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:21,350Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:21,357Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:21,359Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:21,361Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:21,370Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:21,371Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:21,378Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:21,378Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:21,378Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:21,378Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:21,668Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172918.039\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:29:21,669Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172918.039/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:21,669Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172918.039/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:21,697Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:21,712Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:21,786Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:21,786Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:21,786Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:21,789Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:18.039Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:22,274Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:22,277Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172918.039\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:22,277Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:22,278Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:22,280Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:22,280Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:22,332Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:22,341Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:22,345Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:22,346Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:22,371Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:22,371Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:22,460Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:22,466Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:22,466Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,468Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:22,473Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,485Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:22,489Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,494Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:22,722Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:22,727Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173359529) {}
[INFO ] 2019-09-22T17:29:22,731Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:22,738Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,739Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:22,748Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173361100) {}
[INFO ] 2019-09-22T17:29:22,749Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:22,756Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,757Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:22,765Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,765Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:22,765Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173362466) {}
[INFO ] 2019-09-22T17:29:22,766Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:29:22,771Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412}
[WARN ] 2019-09-22T17:29:22,774Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412}
[WARN ] 2019-09-22T17:29:23,683Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412}
[WARN ] 2019-09-22T17:29:23,687Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412}
[WARN ] 2019-09-22T17:29:23,689Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412}
[WARN ] 2019-09-22T17:29:23,692Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412}
[WARN ] 2019-09-22T17:29:23,713Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412}
[WARN ] 2019-09-22T17:29:23,719Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,721Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,721Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,738Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,781Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[WARN ] 2019-09-22T17:29:23,781Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,794Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[WARN ] 2019-09-22T17:29:23,798Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,812Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,812Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=6b6b921a-53de-4e13-becf-9ec58981138f, invocation_id=57d3c9c7-7166-450c-826c-266b93811c78, invocation_timestamp=2019-09-22T17:29:22.767Z, origin=Only For Testing, session_id=57d3c9c7-7166-450c-826c-266b93811c78, session_timestamp=2019-09-22T17:29:22.767Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,818Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:23,818Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f856781f-7dfe-46d1-af88-ca922627e1d1] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5ed8c0fd, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=c52d702e-3052-4030-93b0-24c95e439728) {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[INFO ] 2019-09-22T17:29:23,819Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [f856781f-7dfe-46d1-af88-ca922627e1d1] has error [0] {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:23,819Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f856781f-7dfe-46d1-af88-ca922627e1d1] error allowed to propagate {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[WARN ] 2019-09-22T17:29:23,824Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f856781f-7dfe-46d1-af88-ca922627e1d1] errored, dumping all transitions:

 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.770Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4A034E2A26FADDD678ACD2CF5F5C1A986B1B63A266DDFE7D96C2437079ABCCBD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55192f63])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55192f63])
    SignalFlowHasStarted(flowId=[f856781f-7dfe-46d1-af88-ca922627e1d1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6862999457929308648), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3664498265898333112), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6862999457929308648-677322613467030287-0-0), senderUUID=c52d702e-3052-4030-93b0-24c95e439728))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55192f63]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3664498265898333112): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.770Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.770Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.779Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), maySkipCheckpoint=false, fiber=040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686, )
  Actions: 
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4A034E2A26FADDD678ACD2CF5F5C1A986B1B63A266DDFE7D96C2437079ABCCBD)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686)


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.780Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3664498265898333112).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.784Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.791Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8, )
  Actions: 
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686
    A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.794Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6862999457929308648), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6862999457929308648-677322613467030287-2-0), senderUUID=c52d702e-3052-4030-93b0-24c95e439728))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.794Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.799Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.802Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), maySkipCheckpoint=false, fiber=D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789, )
  Actions: 
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8
    D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))])


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.803Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.817Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3664498265898333112), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2]
checkpoint.sessions.SessionId(toLong=3664498265898333112).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648))
    Ended


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.818Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.818Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.819Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7253029130040298538, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.819Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.819Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[WARN ] 2019-09-22T17:29:23,824Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f856781f-7dfe-46d1-af88-ca922627e1d1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:29:23,826Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[WARN ] 2019-09-22T17:29:23,836Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f856781f-7dfe-46d1-af88-ca922627e1d1] errored, dumping all transitions:

 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.770Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4A034E2A26FADDD678ACD2CF5F5C1A986B1B63A266DDFE7D96C2437079ABCCBD), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55192f63])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55192f63])
    SignalFlowHasStarted(flowId=[f856781f-7dfe-46d1-af88-ca922627e1d1])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6862999457929308648), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=3664498265898333112), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6862999457929308648-677322613467030287-0-0), senderUUID=c52d702e-3052-4030-93b0-24c95e439728))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@55192f63]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3664498265898333112): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.770Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.770Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.779Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), maySkipCheckpoint=false, fiber=040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686, )
  Actions: 
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4A034E2A26FADDD678ACD2CF5F5C1A986B1B63A266DDFE7D96C2437079ABCCBD)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686)


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.780Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=3664498265898333112).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.784Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.791Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8, )
  Actions: 
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    040AE682D61F3D75A475EA2A830FFCF9614AF06A19F30021E65DC45532C7C686
    A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.794Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6862999457929308648), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--6862999457929308648-677322613467030287-2-0), senderUUID=c52d702e-3052-4030-93b0-24c95e439728))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.794Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.799Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.802Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), maySkipCheckpoint=false, fiber=D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789, )
  Actions: 
    PersistCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648)), errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    A50F809A2B9D4FD115D146EC2A6B030FA7D256F4C7B7FE09800EDA8223AE88C8
    D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))])


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.803Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.817Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3664498265898333112), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2]
checkpoint.sessions.SessionId(toLong=3664498265898333112).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-6862999457929308648))
    Ended


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.818Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.818Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.819Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=7253029130040298538, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.819Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.819Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [f856781f-7dfe-46d1-af88-ca922627e1d1] ---
  Timestamp: 2019-09-22T17:29:23.835Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=7253029130040298538)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)], senderUUID=c52d702e-3052-4030-93b0-24c95e439728)
    CreateTransaction
    RemoveCheckpoint(id=[f856781f-7dfe-46d1-af88-ca922627e1d1])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2])
    ReleaseSoftLocks(uuid=f856781f-7dfe-46d1-af88-ca922627e1d1)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=3664498265898333112)])
    RemoveFlow(flowId=[f856781f-7dfe-46d1-af88-ca922627e1d1], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=7253029130040298538, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Invocation, sessionId=47fafbf1-a1d3-4c21-ac81-094dd6771995, timestamp: 2019-09-22T17:29:23.766Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=3664498265898333112)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--6862999457929308648-677322613467030287)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=3664498265898333112))]), frozenFiber=D822E24CE725AAF25B111E49753699675E7E4FB5C81E48C2F29D7FD73C6B3789), errorState=Errored(errors=[FlowError(errorId=7253029130040298538, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5ed8c0fd, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=c52d702e-3052-4030-93b0-24c95e439728))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@54b371c2]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
[WARN ] 2019-09-22T17:29:23,836Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f856781f-7dfe-46d1-af88-ca922627e1d1] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=f856781f-7dfe-46d1-af88-ca922627e1d1, invocation_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, invocation_timestamp=2019-09-22T17:29:23.766Z, origin=O=Mock Company 1, L=London, C=GB, session_id=47fafbf1-a1d3-4c21-ac81-094dd6771995, session_timestamp=2019-09-22T17:29:23.766Z, thread-id=412, tx_id=5D93192051C0FBCC8858B8DC0AB4E3F4A7E93AE331E286C384E7BB9D5F335EF9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=3664498265898333112) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:24,142Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172923.854\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:29:24,143Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172923.854/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:24,144Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172923.854/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:24,166Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:24,196Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:24,206Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:24,206Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:24,206Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:24,212Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:23.854Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:24,614Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:24,616Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172923.854\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:24,616Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:24,617Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:24,620Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:24,620Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:24,697Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:24,701Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:24,734Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:24,740Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:24,740Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:24,826Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:24,839Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:24,839Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:24,841Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:24,847Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:24,869Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:24,873Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:24,878Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:25,313Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:25,316Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:29:25,317Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:29:25,321Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:25,323Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:25,324Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:25,324Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:25,324Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:25,580Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172923.854\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:29:25,580Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172923.854/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:25,581Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172923.854/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:25,604Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:25,635Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:25,704Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:25,704Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:25,704Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:25,708Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:23.854Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:26,048Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:26,050Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172923.854\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:26,050Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:26,052Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:26,055Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:26,055Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:26,111Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:26,124Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:26,126Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:26,127Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:26,145Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:26,145Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:26,211Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:26,224Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:26,224Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:26,225Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:26,229Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:26,242Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:26,246Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:26,250Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:26,655Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:26,661Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:26,664Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:26,665Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:26,671Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:26,673Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:26,679Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:26,679Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:26,679Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:26,679Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:26,946Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172923.854\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:29:26,947Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172923.854/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:26,948Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172923.854/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:26,971Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:27,004Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:27,053Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:27,053Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:27,053Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:27,055Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:23.854Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:27,323Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:27,325Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172923.854\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:27,325Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:27,327Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:27,329Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:27,329Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:27,379Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:27,384Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:27,386Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:27,386Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:27,401Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:27,401Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:27,464Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:27,474Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:27,475Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:27,477Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:27,481Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:27,518Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:27,523Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:27,529Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:27,997Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:28,004Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:28,006Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173364839) {}
[INFO ] 2019-09-22T17:29:28,007Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:28,014Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:28,015Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:28,021Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173366224) {}
[INFO ] 2019-09-22T17:29:28,022Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:28,026Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:28,027Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:28,032Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:28,032Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:28,032Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173367474) {}
[INFO ] 2019-09-22T17:29:28,032Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:29:28,036Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543}
[WARN ] 2019-09-22T17:29:28,038Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543}
[WARN ] 2019-09-22T17:29:28,529Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543}
[WARN ] 2019-09-22T17:29:28,530Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543}
[WARN ] 2019-09-22T17:29:28,531Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543}
[WARN ] 2019-09-22T17:29:28,535Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543}
[WARN ] 2019-09-22T17:29:28,547Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543}
[WARN ] 2019-09-22T17:29:28,550Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,551Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,551Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,561Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,594Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[WARN ] 2019-09-22T17:29:28,594Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,603Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[WARN ] 2019-09-22T17:29:28,606Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,618Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,618Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=9e8460b3-ec5e-4c80-b3de-71a1f68a945f, invocation_id=0e093c36-8333-4093-9ff5-f41c487b9434, invocation_timestamp=2019-09-22T17:29:28.033Z, origin=Only For Testing, session_id=0e093c36-8333-4093-9ff5-f41c487b9434, session_timestamp=2019-09-22T17:29:28.033Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,625Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:28,626Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@2a4174d, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=035498d8-fa6e-48e3-836c-cc2e7bd93741) {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[INFO ] 2019-09-22T17:29:28,626Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] has error [0] {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:28,626Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] error allowed to propagate {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[WARN ] 2019-09-22T17:29:28,629Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] errored, dumping all transitions:

 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.589Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2F44BE8BA7018A81E7531E792D193564331BD1C75DF221FF9C807F095C66D4DB), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a921ab2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a921ab2])
    SignalFlowHasStarted(flowId=[f34206d1-61ce-4240-bbdd-d69c13c865b7])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2489109632962987390), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2366973818475362085), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2489109632962987390--6307322982226294114-0-0), senderUUID=035498d8-fa6e-48e3-836c-cc2e7bd93741))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a921ab2]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2366973818475362085): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.589Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.589Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.592Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), maySkipCheckpoint=false, fiber=DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9, )
  Actions: 
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2F44BE8BA7018A81E7531E792D193564331BD1C75DF221FF9C807F095C66D4DB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9)


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.593Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2366973818475362085).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.594Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.600Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39, )
  Actions: 
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9
    2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.602Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2489109632962987390), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2489109632962987390--6307322982226294114-2-0), senderUUID=035498d8-fa6e-48e3-836c-cc2e7bd93741))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.602Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.607Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.611Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), maySkipCheckpoint=false, fiber=A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD, )
  Actions: 
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39
    A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))])


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.611Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.625Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2366973818475362085), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581]
checkpoint.sessions.SessionId(toLong=-2366973818475362085).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390))
    Ended


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.625Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.625Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.626Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4376915424605023969, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.626Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.626Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[WARN ] 2019-09-22T17:29:28,630Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:29:28,631Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[WARN ] 2019-09-22T17:29:28,640Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] errored, dumping all transitions:

 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.589Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2F44BE8BA7018A81E7531E792D193564331BD1C75DF221FF9C807F095C66D4DB), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a921ab2])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a921ab2])
    SignalFlowHasStarted(flowId=[f34206d1-61ce-4240-bbdd-d69c13c865b7])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2489109632962987390), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-2366973818475362085), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2489109632962987390--6307322982226294114-0-0), senderUUID=035498d8-fa6e-48e3-836c-cc2e7bd93741))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7a921ab2]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2366973818475362085): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.589Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.589Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.592Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), maySkipCheckpoint=false, fiber=DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9, )
  Actions: 
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2F44BE8BA7018A81E7531E792D193564331BD1C75DF221FF9C807F095C66D4DB)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9)


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.593Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-2366973818475362085).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.594Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.600Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39, )
  Actions: 
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    DBA686A156A49925CEB2E0C2EC3F42A06C2DD7CE953FEE4AAA9D94D469E093D9
    2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.602Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2489109632962987390), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2489109632962987390--6307322982226294114-2-0), senderUUID=035498d8-fa6e-48e3-836c-cc2e7bd93741))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.602Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.607Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.611Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), maySkipCheckpoint=false, fiber=A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD, )
  Actions: 
    PersistCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390)), errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    2C3AABF19D8F6186AD85798CFE2540A322E0C632F1816BC7A41CB8A80D135E39
    A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))])


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.611Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.625Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2366973818475362085), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581]
checkpoint.sessions.SessionId(toLong=-2366973818475362085).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2489109632962987390))
    Ended


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.625Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.625Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.626Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4376915424605023969, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.626Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.626Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] ---
  Timestamp: 2019-09-22T17:29:28.637Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4376915424605023969)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)], senderUUID=035498d8-fa6e-48e3-836c-cc2e7bd93741)
    CreateTransaction
    RemoveCheckpoint(id=[f34206d1-61ce-4240-bbdd-d69c13c865b7])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581])
    ReleaseSoftLocks(uuid=f34206d1-61ce-4240-bbdd-d69c13c865b7)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-2366973818475362085)])
    RemoveFlow(flowId=[f34206d1-61ce-4240-bbdd-d69c13c865b7], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4376915424605023969, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Invocation, sessionId=6ba70c1c-4967-473f-b321-ab791f097a37, timestamp: 2019-09-22T17:29:28.579Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-2366973818475362085)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2489109632962987390--6307322982226294114)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-2366973818475362085))]), frozenFiber=A546E2ADB94881A81438CAE26D2A31556AAFC117CC8635BB0BE30A8F5B5875DD), errorState=Errored(errors=[FlowError(errorId=4376915424605023969, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@2a4174d, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=035498d8-fa6e-48e3-836c-cc2e7bd93741))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6f851581]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
[WARN ] 2019-09-22T17:29:28,640Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [f34206d1-61ce-4240-bbdd-d69c13c865b7] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=f34206d1-61ce-4240-bbdd-d69c13c865b7, invocation_id=6ba70c1c-4967-473f-b321-ab791f097a37, invocation_timestamp=2019-09-22T17:29:28.579Z, origin=O=Mock Company 1, L=London, C=GB, session_id=6ba70c1c-4967-473f-b321-ab791f097a37, session_timestamp=2019-09-22T17:29:28.579Z, thread-id=543, tx_id=019F502642E357DDAF72382D5732506C8DB956963037B71B66AC8F923E85C4D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-2366973818475362085) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:28,929Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172928.649\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:29:28,930Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172928.649/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:28,931Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172928.649/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:28,954Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:28,981Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:29,004Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:29,004Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:29,004Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:29,016Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:28.649Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:29,375Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:29,377Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172928.649\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:29,377Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:29,378Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:29,380Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:29,380Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:29,413Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:29,432Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:29,452Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:29,458Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:29,458Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:29,530Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:29,533Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:29,533Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:29,535Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:29,544Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:29,574Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:29,578Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:29,582Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:30,016Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:30,022Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:29:30,022Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:29:30,026Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:30,029Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:30,029Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:30,029Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:30,029Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:30,322Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172928.649\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:29:30,323Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172928.649/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:30,324Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172928.649/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:30,346Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:30,395Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:30,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:30,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:30,460Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:30,463Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:28.649Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:30,824Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:30,825Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172928.649\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:30,826Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:30,828Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:30,831Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:30,831Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:30,896Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:30,900Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:30,905Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:30,906Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:30,929Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:30,929Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:31,001Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:31,010Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:31,010Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:31,012Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:31,017Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:31,026Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:31,029Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:31,033Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:31,231Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:31,235Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:31,237Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:31,238Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:31,245Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:31,246Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:31,252Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:31,252Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:31,252Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:31,252Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:31,417Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172928.649\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:29:31,418Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172928.649/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:31,419Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172928.649/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:31,439Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:31,445Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:31,479Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:31,480Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:31,480Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:31,482Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:28.649Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:31,839Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:31,841Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172928.649\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:31,841Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:31,844Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:31,848Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:31,848Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:31,913Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:31,926Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:31,928Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:31,929Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:31,946Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:31,946Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:32,017Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:32,022Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:32,022Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,025Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:32,030Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,041Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:32,044Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,048Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:32,512Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:32,518Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,522Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173369533) {}
[INFO ] 2019-09-22T17:29:32,523Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:32,532Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,533Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:32,541Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173371010) {}
[INFO ] 2019-09-22T17:29:32,543Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:32,550Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,551Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:32,558Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,558Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:32,558Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173372022) {}
[INFO ] 2019-09-22T17:29:32,558Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:29:32,562Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674}
[WARN ] 2019-09-22T17:29:32,564Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674}
[WARN ] 2019-09-22T17:29:33,315Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674}
[WARN ] 2019-09-22T17:29:33,317Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674}
[WARN ] 2019-09-22T17:29:33,318Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674}
[WARN ] 2019-09-22T17:29:33,322Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674}
[WARN ] 2019-09-22T17:29:33,336Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674}
[WARN ] 2019-09-22T17:29:33,339Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,339Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,339Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,349Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,382Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[WARN ] 2019-09-22T17:29:33,382Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,392Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[WARN ] 2019-09-22T17:29:33,397Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,409Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,409Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=fe0a44f4-3b36-412d-a504-f850f5993f48, invocation_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, invocation_timestamp=2019-09-22T17:29:32.559Z, origin=Only For Testing, session_id=04c0a720-92ce-4b3c-8929-d64c84455e4f, session_timestamp=2019-09-22T17:29:32.559Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,417Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:33,418Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [05727192-401b-4bab-8aa9-9c24d782ffa3] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5346e11e, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=f4d1db43-1f88-41dd-966d-139ef209c438) {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[INFO ] 2019-09-22T17:29:33,418Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [05727192-401b-4bab-8aa9-9c24d782ffa3] has error [0] {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:33,418Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [05727192-401b-4bab-8aa9-9c24d782ffa3] error allowed to propagate {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[WARN ] 2019-09-22T17:29:33,423Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [05727192-401b-4bab-8aa9-9c24d782ffa3] errored, dumping all transitions:

 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.374Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=8C8A83DD1D83669B31033F62170F0111C8741C217DABB676B5671158FC6744A4), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@bde4288])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@bde4288])
    SignalFlowHasStarted(flowId=[05727192-401b-4bab-8aa9-9c24d782ffa3])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2992863569713891543), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=662488025062967201), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2992863569713891543-6036102394169657603-0-0), senderUUID=f4d1db43-1f88-41dd-966d-139ef209c438))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@bde4288]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=662488025062967201): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.374Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.374Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.381Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), maySkipCheckpoint=false, fiber=1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3, )
  Actions: 
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=8C8A83DD1D83669B31033F62170F0111C8741C217DABB676B5671158FC6744A4)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3)


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.382Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=662488025062967201).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.384Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.391Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993, )
  Actions: 
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3
    715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.392Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2992863569713891543), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2992863569713891543-6036102394169657603-2-0), senderUUID=f4d1db43-1f88-41dd-966d-139ef209c438))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.392Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.397Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.401Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), maySkipCheckpoint=false, fiber=03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331, )
  Actions: 
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993
    03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))])


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.401Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.416Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=662488025062967201), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323]
checkpoint.sessions.SessionId(toLong=662488025062967201).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=2992863569713891543))
    Ended


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.417Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.417Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.418Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=772222257832454500, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.419Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.419Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[WARN ] 2019-09-22T17:29:33,423Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [05727192-401b-4bab-8aa9-9c24d782ffa3] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:29:33,424Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[WARN ] 2019-09-22T17:29:33,434Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [05727192-401b-4bab-8aa9-9c24d782ffa3] errored, dumping all transitions:

 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.374Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=8C8A83DD1D83669B31033F62170F0111C8741C217DABB676B5671158FC6744A4), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@bde4288])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@bde4288])
    SignalFlowHasStarted(flowId=[05727192-401b-4bab-8aa9-9c24d782ffa3])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2992863569713891543), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=662488025062967201), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2992863569713891543-6036102394169657603-0-0), senderUUID=f4d1db43-1f88-41dd-966d-139ef209c438))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@bde4288]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=662488025062967201): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.374Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.374Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.381Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), maySkipCheckpoint=false, fiber=1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3, )
  Actions: 
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=8C8A83DD1D83669B31033F62170F0111C8741C217DABB676B5671158FC6744A4)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3)


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.382Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=662488025062967201).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.384Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.391Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993, )
  Actions: 
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    1C25E2FDCC7975B947FDED119A6F6D93CEC7667D1A9E819D2A96116212CC07A3
    715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.392Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2992863569713891543), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2992863569713891543-6036102394169657603-2-0), senderUUID=f4d1db43-1f88-41dd-966d-139ef209c438))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.392Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.397Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.401Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), maySkipCheckpoint=false, fiber=03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331, )
  Actions: 
    PersistCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2992863569713891543)), errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    715136311A540AB1F14207EA8889A8759C053D8EF0083BC5509D4263122DD993
    03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))])


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.401Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.416Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=662488025062967201), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323]
checkpoint.sessions.SessionId(toLong=662488025062967201).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=2992863569713891543))
    Ended


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.417Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.417Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.418Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=772222257832454500, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.419Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.419Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [05727192-401b-4bab-8aa9-9c24d782ffa3] ---
  Timestamp: 2019-09-22T17:29:33.431Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=772222257832454500)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)], senderUUID=f4d1db43-1f88-41dd-966d-139ef209c438)
    CreateTransaction
    RemoveCheckpoint(id=[05727192-401b-4bab-8aa9-9c24d782ffa3])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323])
    ReleaseSoftLocks(uuid=05727192-401b-4bab-8aa9-9c24d782ffa3)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=662488025062967201)])
    RemoveFlow(flowId=[05727192-401b-4bab-8aa9-9c24d782ffa3], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=772222257832454500, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Invocation, sessionId=2a0c59a8-787d-4373-b728-475eefebfe2e, timestamp: 2019-09-22T17:29:33.367Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=662488025062967201)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2992863569713891543-6036102394169657603)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=662488025062967201))]), frozenFiber=03E8190C5ACDEAB4931AAA6D3739191AFF19AF208E34D665A2ACB8047503D331), errorState=Errored(errors=[FlowError(errorId=772222257832454500, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@5346e11e, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=f4d1db43-1f88-41dd-966d-139ef209c438))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3ef9a323]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
[WARN ] 2019-09-22T17:29:33,434Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [05727192-401b-4bab-8aa9-9c24d782ffa3] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=05727192-401b-4bab-8aa9-9c24d782ffa3, invocation_id=2a0c59a8-787d-4373-b728-475eefebfe2e, invocation_timestamp=2019-09-22T17:29:33.367Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2a0c59a8-787d-4373-b728-475eefebfe2e, session_timestamp=2019-09-22T17:29:33.367Z, thread-id=674, tx_id=B12A78BB4EC680BF19C582004320D4B2BF4684270D15CAA2216F192E89F8ED18}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=662488025062967201) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:33,727Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172933.451\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:29:33,727Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172933.451/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:33,728Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172933.451/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:33,750Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:33,758Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:33,769Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:33,770Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:33,770Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:33,773Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:33.451Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:34,182Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:34,185Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172933.451\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:34,185Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:34,185Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:34,191Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:34,192Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:34,255Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:34,265Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:34,298Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:34,304Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:34,306Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:34,406Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:29:34,410Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:34,411Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:34,413Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:34,423Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:34,441Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:34,445Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:34,448Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:34,765Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:34,767Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:29:34,767Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:29:34,772Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:34,774Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:34,774Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:34,774Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:34,774Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:34,928Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172933.451\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:29:34,929Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172933.451/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:34,929Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172933.451/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:34,950Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:34,960Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:34,998Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:34,999Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:34,999Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:35,002Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:33.451Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:35,318Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:35,320Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172933.451\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:35,320Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:35,323Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:35,325Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:35,326Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:35,389Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:35,395Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:35,398Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:35,399Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:35,422Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:35,422Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:35,528Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:35,533Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:35,533Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:35,534Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:35,539Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:35,569Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:35,573Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:35,576Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:35,824Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:35,827Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:35,829Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:35,829Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:35,835Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:35,836Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:35,841Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:35,841Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:35,841Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:35,841Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:36,132Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-172933.451\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:29:36,133Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172933.451/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:29:36,134Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-172933.451/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:29:36,158Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:29:36,173Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:29:36,225Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:36,226Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:36,226Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:29:36,228Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:29:33.451Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:29:36,509Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:29:36,511Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-172933.451\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:29:36,512Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:29:36,514Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:29:36,518Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:36,518Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:36,569Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:29:36,575Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:29:36,576Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:29:36,577Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:29:36,601Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:36,601Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:36,733Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:29:36,738Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:29:36,738Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:36,740Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:36,744Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:36,778Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:29:36,785Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:36,790Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:37,237Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80 uploader=app filename=null {}
[INFO ] 2019-09-22T17:29:37,243Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:37,244Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173374411) {}
[INFO ] 2019-09-22T17:29:37,246Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:37,251Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:37,253Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:37,259Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173375533) {}
[INFO ] 2019-09-22T17:29:37,260Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:37,266Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:37,268Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:29:37,274Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:37,275Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:29:37,275Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173376738) {}
[INFO ] 2019-09-22T17:29:37,275Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:29:37,280Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805}
[WARN ] 2019-09-22T17:29:37,283Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805}
[WARN ] 2019-09-22T17:29:37,789Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805}
[WARN ] 2019-09-22T17:29:37,792Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805}
[WARN ] 2019-09-22T17:29:37,793Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805}
[WARN ] 2019-09-22T17:29:37,796Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805}
[WARN ] 2019-09-22T17:29:37,808Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805}
[WARN ] 2019-09-22T17:29:37,812Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,812Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,812Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,822Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,851Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[WARN ] 2019-09-22T17:29:37,851Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,858Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[WARN ] 2019-09-22T17:29:37,862Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,872Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,872Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=a0031c83-1bd5-4461-b150-3d7dbd2a82b2, invocation_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, invocation_timestamp=2019-09-22T17:29:37.275Z, origin=Only For Testing, session_id=4db8335c-d9ee-4d2e-afc9-b73c52f53bbd, session_timestamp=2019-09-22T17:29:37.275Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,878Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:37,878Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3fd753b6, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=b80494bc-257a-4332-82bb-1cca08b9bf07) {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[INFO ] 2019-09-22T17:29:37,878Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] has error [0] {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:29:37,878Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] error allowed to propagate {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[WARN ] 2019-09-22T17:29:37,881Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] errored, dumping all transitions:

 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.846Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2F337708889D45D4CD0A23E5D3E5EFED554EF157F92C1A0FE91465CA7D4CD804), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33278b6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33278b6])
    SignalFlowHasStarted(flowId=[e63e27f8-8e29-4ad4-817d-ca69c651b074])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5217063954904347283), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2776929365782349398), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5217063954904347283--7241135563072757269-0-0), senderUUID=b80494bc-257a-4332-82bb-1cca08b9bf07))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33278b6]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2776929365782349398): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.846Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.846Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.849Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), maySkipCheckpoint=false, fiber=F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6, )
  Actions: 
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2F337708889D45D4CD0A23E5D3E5EFED554EF157F92C1A0FE91465CA7D4CD804)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6)


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.849Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2776929365782349398).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.851Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.855Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92, )
  Actions: 
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6
    BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.858Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5217063954904347283), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5217063954904347283--7241135563072757269-2-0), senderUUID=b80494bc-257a-4332-82bb-1cca08b9bf07))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.858Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.862Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.865Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), maySkipCheckpoint=false, fiber=3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC, )
  Actions: 
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92
    3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))])


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.865Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.877Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2776929365782349398), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7]
checkpoint.sessions.SessionId(toLong=2776929365782349398).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283))
    Ended


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.878Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.878Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.878Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3247431693266506223, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.879Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.879Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[WARN ] 2019-09-22T17:29:37,882Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:29:37,882Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[WARN ] 2019-09-22T17:29:37,889Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] errored, dumping all transitions:

 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.846Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=2F337708889D45D4CD0A23E5D3E5EFED554EF157F92C1A0FE91465CA7D4CD804), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33278b6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33278b6])
    SignalFlowHasStarted(flowId=[e63e27f8-8e29-4ad4-817d-ca69c651b074])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5217063954904347283), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=2776929365782349398), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5217063954904347283--7241135563072757269-0-0), senderUUID=b80494bc-257a-4332-82bb-1cca08b9bf07))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@33278b6]
    []
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2776929365782349398): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.846Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.846Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.849Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), maySkipCheckpoint=false, fiber=F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6, )
  Actions: 
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=2F337708889D45D4CD0A23E5D3E5EFED554EF157F92C1A0FE91465CA7D4CD804)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6)


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.849Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=2776929365782349398).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.851Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.855Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92, )
  Actions: 
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    F46B00E394B1387A429D2A30481B9AB5E23B73CC485BB310D28CFE9159BD5BC6
    BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.858Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5217063954904347283), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--5217063954904347283--7241135563072757269-2-0), senderUUID=b80494bc-257a-4332-82bb-1cca08b9bf07))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.858Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.862Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.865Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), maySkipCheckpoint=false, fiber=3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC, )
  Actions: 
    PersistCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283)), errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    BD059758A997CB27804D0C3279AAF228A95CB8FEFB258B4B1F1FCA0150756C92
    3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))])


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.865Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.877Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2776929365782349398), payload=net.corda.node.services.statemachine.EndSessionMessage@702bfbff), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7]
checkpoint.sessions.SessionId(toLong=2776929365782349398).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-5217063954904347283))
    Ended


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.878Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.878Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)]


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.878Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-3247431693266506223, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.879Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.879Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] ---
  Timestamp: 2019-09-22T17:29:37.888Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-3247431693266506223)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)], senderUUID=b80494bc-257a-4332-82bb-1cca08b9bf07)
    CreateTransaction
    RemoveCheckpoint(id=[e63e27f8-8e29-4ad4-817d-ca69c651b074])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7])
    ReleaseSoftLocks(uuid=e63e27f8-8e29-4ad4-817d-ca69c651b074)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=2776929365782349398)])
    RemoveFlow(flowId=[e63e27f8-8e29-4ad4-817d-ca69c651b074], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-3247431693266506223, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Invocation, sessionId=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, timestamp: 2019-09-22T17:29:37.839Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=2776929365782349398)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--5217063954904347283--7241135563072757269)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=985800781E39B1EAA31413838D2486331BB3428059C590D1240E0A8CE6715D80), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=2776929365782349398))]), frozenFiber=3653D2A7AEF9EFEDDB2C21B62241C37B82F16E9015569287BA9BABEF62DCAACC), errorState=Errored(errors=[FlowError(errorId=-3247431693266506223, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3fd753b6, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=b80494bc-257a-4332-82bb-1cca08b9bf07))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@601906b7]
    []
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
[WARN ] 2019-09-22T17:29:37,889Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [e63e27f8-8e29-4ad4-817d-ca69c651b074] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=e63e27f8-8e29-4ad4-817d-ca69c651b074, invocation_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, invocation_timestamp=2019-09-22T17:29:37.839Z, origin=O=Mock Company 1, L=London, C=GB, session_id=ea311ad0-0781-4bbd-bcee-7b1f77a8452d, session_timestamp=2019-09-22T17:29:37.839Z, thread-id=805, tx_id=F1CBCA52A0CC3AD6AD4F31AD469E4DFB4971265028EA27D54CD7B8A64618B512}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=2776929365782349398) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:32:48,770Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\adnanahmed\Documents\bootcamp-cordapp-4 ... {}
[INFO ] 2019-09-22T17:32:57,351Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173243.444\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:32:57,355Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173243.444/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:32:57,385Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173243.444/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:32:57,647Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:32:58,371Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:32:58,450Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:32:58,450Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:32:58,450Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:32:58,611Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:32:43.384Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:33:03,050Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:33:03,060Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173243.444\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:33:03,060Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:33:03,068Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:33:03,181Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:03,189Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:05,136Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:05,816Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:33:05,880Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:33:05,906Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:33:05,906Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:33:06,204Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:33:06,222Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:33:06,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:06,230Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:06,394Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:06,461Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:33:06,481Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:06,512Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:07,006Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=5326CA0F9067E5F5509BF23E598413AC1CA5893E1DE52FF2D3FB53F5362370E4 uploader=app filename=null {}
[INFO ] 2019-09-22T17:33:07,010Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:33:07,013Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:33:07,349Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:07,372Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:07,374Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:07,374Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:07,375Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:07,405Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173243.444\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:33:07,406Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173243.444/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:33:07,406Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173243.444/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:33:07,627Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:33:07,638Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:33:07,698Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:33:07,698Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:33:07,699Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:33:07,704Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:32:43.384Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:33:08,393Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:33:08,397Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173243.444\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:33:08,397Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:33:08,398Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:33:08,402Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:08,402Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:08,494Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:08,505Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:33:08,509Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:33:08,510Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:33:08,538Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:33:08,538Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:33:08,660Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:33:08,666Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:33:08,667Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:08,669Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:08,677Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:08,710Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:33:08,716Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:08,724Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:08,964Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=5326CA0F9067E5F5509BF23E598413AC1CA5893E1DE52FF2D3FB53F5362370E4 uploader=app filename=null {}
[INFO ] 2019-09-22T17:33:08,977Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:08,981Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:08,984Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:08,996Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:08,998Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:09,011Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:09,011Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:09,011Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:09,011Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:09,022Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173243.444\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:33:09,023Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173243.444/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:33:09,023Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173243.444/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:33:09,178Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:33:09,208Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:33:09,251Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:33:09,251Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:33:09,251Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:33:09,256Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:32:43.384Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:33:09,876Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:33:09,880Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173243.444\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:33:09,880Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:33:09,881Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:33:09,887Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:09,887Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:09,975Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:33:09,986Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:33:09,994Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:33:09,995Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:33:10,017Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:33:10,017Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:33:10,137Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:33:10,144Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:33:10,144Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,147Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:10,158Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,192Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:33:10,196Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,204Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:10,609Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=5326CA0F9067E5F5509BF23E598413AC1CA5893E1DE52FF2D3FB53F5362370E4 uploader=app filename=null {}
[INFO ] 2019-09-22T17:33:10,617Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,620Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173586222) {}
[INFO ] 2019-09-22T17:33:10,622Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:10,632Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,634Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:10,642Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173588666) {}
[INFO ] 2019-09-22T17:33:10,644Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:10,653Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,654Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:33:10,663Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,663Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:33:10,663Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173590144) {}
[INFO ] 2019-09-22T17:33:10,663Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:33:10,854Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
[INFO ] 2019-09-22T17:33:10,866Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:33:10,871Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [6018671e-1c89-4d26-bfe8-4290e212f059] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Invocation, sessionId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=5326CA0F9067E5F5509BF23E598413AC1CA5893E1DE52FF2D3FB53F5362370E4), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=581004CC6E050D77B965F811B438F77E3BE97B6E721EB86FC08BB2E2748368DE), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@5494322a, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=0236733a-3720-4401-87d9-7d2e593c0ecd) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
[INFO ] 2019-09-22T17:33:10,872Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [6018671e-1c89-4d26-bfe8-4290e212f059] has error [0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:33:10,872Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [6018671e-1c89-4d26-bfe8-4290e212f059] error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
[WARN ] 2019-09-22T17:33:10,892Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6018671e-1c89-4d26-bfe8-4290e212f059] errored, dumping all transitions:

 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.835Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6018671e-1c89-4d26-bfe8-4290e212f059], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Invocation, sessionId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=5326CA0F9067E5F5509BF23E598413AC1CA5893E1DE52FF2D3FB53F5362370E4), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=581004CC6E050D77B965F811B438F77E3BE97B6E721EB86FC08BB2E2748368DE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5a053f7c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5a053f7c])
    SignalFlowHasStarted(flowId=[6018671e-1c89-4d26-bfe8-4290e212f059])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5a053f7c]
    []


 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.872Z
  Event: Error(exception=java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5665413199325592722, exception=java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.879Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.883Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
[WARN ] 2019-09-22T17:33:10,892Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6018671e-1c89-4d26-bfe8-4290e212f059] error [errorCode=e0fdk4, moreInformationAt=https://errors.corda.net/OS/4.0/e0fdk4] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:33:10,895Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
[WARN ] 2019-09-22T17:33:10,980Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6018671e-1c89-4d26-bfe8-4290e212f059] errored, dumping all transitions:

 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.835Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6018671e-1c89-4d26-bfe8-4290e212f059], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Invocation, sessionId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=5326CA0F9067E5F5509BF23E598413AC1CA5893E1DE52FF2D3FB53F5362370E4), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=581004CC6E050D77B965F811B438F77E3BE97B6E721EB86FC08BB2E2748368DE), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5a053f7c])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5a053f7c])
    SignalFlowHasStarted(flowId=[6018671e-1c89-4d26-bfe8-4290e212f059])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@5a053f7c]
    []


 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.872Z
  Event: Error(exception=java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-5665413199325592722, exception=java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.879Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.883Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [6018671e-1c89-4d26-bfe8-4290e212f059] ---
  Timestamp: 2019-09-22T17:33:10.976Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-5665413199325592722)], sessions=[], senderUUID=0236733a-3720-4401-87d9-7d2e593c0ecd)
    CreateTransaction
    RemoveCheckpoint(id=[6018671e-1c89-4d26-bfe8-4290e212f059])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=6018671e-1c89-4d26-bfe8-4290e212f059)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[6018671e-1c89-4d26-bfe8-4290e212f059], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-5665413199325592722, exception=java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Invocation, sessionId=29e77871-ed1f-49c4-ae3a-2176b695b14d, timestamp: 2019-09-22T17:33:10.690Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=5326CA0F9067E5F5509BF23E598413AC1CA5893E1DE52FF2D3FB53F5362370E4), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=581004CC6E050D77B965F811B438F77E3BE97B6E721EB86FC08BB2E2748368DE), errorState=Errored(errors=[FlowError(errorId=-5665413199325592722, exception=java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@5494322a, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=0236733a-3720-4401-87d9-7d2e593c0ecd))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
[WARN ] 2019-09-22T17:33:10,980Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6018671e-1c89-4d26-bfe8-4290e212f059] error [errorCode=e0fdk4, moreInformationAt=https://errors.corda.net/OS/4.0/e0fdk4] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=6018671e-1c89-4d26-bfe8-4290e212f059, invocation_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, invocation_timestamp=2019-09-22T17:33:10.690Z, origin=Only For Testing, session_id=29e77871-ed1f-49c4-ae3a-2176b695b14d, session_timestamp=2019-09-22T17:33:10.690Z, thread-id=148}
java.lang.ClassCastException: bootcamp.TokenContract$Issue cannot be cast to net.corda.core.contracts.CommandData
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:13) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:34:31,893Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\adnanahmed\Documents\bootcamp-cordapp-4 ... {}
[INFO ] 2019-09-22T17:34:40,833Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173426.365\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:34:40,840Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173426.365/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:34:40,878Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173426.365/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:34:41,150Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:34:41,819Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:34:41,902Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:41,904Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:41,905Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:42,083Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:34:26.303Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:34:46,623Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:34:46,633Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173426.365\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:34:46,633Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:34:46,641Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:34:46,756Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:46,815Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:48,938Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:49,565Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:34:49,638Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:34:49,662Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:34:49,667Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:34:49,971Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:34:49,985Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:34:49,985Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:49,991Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:50,161Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:50,267Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:34:50,306Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:50,371Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:50,829Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:34:50,833Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:34:50,837Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:34:51,177Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:51,200Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:51,202Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:51,203Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:51,203Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:51,215Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173426.365\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:34:51,216Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173426.365/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:34:51,217Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173426.365/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:34:51,390Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:34:51,424Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:34:51,477Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:51,478Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:51,478Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:51,483Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:34:26.303Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:34:52,185Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:34:52,188Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173426.365\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:34:52,188Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:34:52,190Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:34:52,204Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:52,206Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:52,309Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:52,319Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:34:52,323Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:34:52,324Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:34:52,354Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:34:52,354Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:34:52,473Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:34:52,480Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:34:52,480Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:52,483Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:52,491Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:52,504Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:34:52,509Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:52,515Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:52,749Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:34:52,759Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:52,762Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:52,764Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:52,778Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:52,780Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:52,790Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:52,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:52,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:52,791Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:52,930Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173426.365\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:34:52,930Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173426.365/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:34:52,931Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173426.365/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:34:52,953Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:34:52,965Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:34:53,013Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:53,013Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:53,013Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:34:53,018Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:34:26.303Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:34:53,621Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:34:53,625Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173426.365\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:34:53,625Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:34:53,627Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:34:53,632Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:53,632Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:53,740Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:34:53,750Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:34:53,754Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:34:53,756Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:34:53,801Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:34:53,801Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:34:53,915Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:34:53,927Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:34:53,927Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:53,929Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:53,937Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:53,951Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:34:53,954Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:53,960Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:54,391Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:34:54,398Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:54,400Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173689985) {}
[INFO ] 2019-09-22T17:34:54,402Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:54,411Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:54,412Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:54,421Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173692480) {}
[INFO ] 2019-09-22T17:34:54,423Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:54,431Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:54,433Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:34:54,446Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:54,447Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:34:54,447Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173693927) {}
[INFO ] 2019-09-22T17:34:54,447Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:34:54,674Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:54,694Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:54,694Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:54,697Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:56,076Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:56,117Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:56,146Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:56,155Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:56,251Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147}
[WARN ] 2019-09-22T17:34:56,266Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,270Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,270Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,332Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,546Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[WARN ] 2019-09-22T17:34:56,557Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,580Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[WARN ] 2019-09-22T17:34:56,598Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,620Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,620Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=3578fdd4-9e2e-4a52-bba6-b91bc909d09d, invocation_id=3269f7eb-13da-4256-8127-26478425b8b8, invocation_timestamp=2019-09-22T17:34:54.479Z, origin=Only For Testing, session_id=3269f7eb-13da-4256-8127-26478425b8b8, session_timestamp=2019-09-22T17:34:54.479Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,661Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:34:56,665Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@46b81495, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=ca0c357b-0e24-48e7-892d-d3f85948753f) {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[INFO ] 2019-09-22T17:34:56,666Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] has error [0] {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:34:56,666Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] error allowed to propagate {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[WARN ] 2019-09-22T17:34:56,699Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] errored, dumping all transitions:

 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.506Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D1873A8672A4B2CDF94DBAA93A93D0116C6EA7E7CA24789AE53A832BAFE99E28), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7956f0a5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7956f0a5])
    SignalFlowHasStarted(flowId=[d529201b-adb0-40b7-86e6-a0fb48e6ef46])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4391929087683681377), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3469465620619038147), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4391929087683681377--5928746443603655242-0-0), senderUUID=ca0c357b-0e24-48e7-892d-d3f85948753f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3469465620619038147): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7956f0a5]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.512Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.516Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.536Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), maySkipCheckpoint=false, fiber=B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3, )
  Actions: 
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D1873A8672A4B2CDF94DBAA93A93D0116C6EA7E7CA24789AE53A832BAFE99E28)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.536Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3469465620619038147).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.557Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.580Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D, )
  Actions: 
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3
    E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.580Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4391929087683681377), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4391929087683681377--5928746443603655242-2-0), senderUUID=ca0c357b-0e24-48e7-892d-d3f85948753f))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.580Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.598Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.602Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), maySkipCheckpoint=false, fiber=01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC, )
  Actions: 
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))])
checkpoint.flowState.frozenFiber.hash: 
    E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D
    01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.602Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.659Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3469465620619038147), payload=net.corda.node.services.statemachine.EndSessionMessage@2ff7ae50), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3469465620619038147).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.661Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.661Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.666Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-194462380581302444, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.676Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.679Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[WARN ] 2019-09-22T17:34:56,699Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:34:56,699Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[WARN ] 2019-09-22T17:34:56,763Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] errored, dumping all transitions:

 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.506Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D1873A8672A4B2CDF94DBAA93A93D0116C6EA7E7CA24789AE53A832BAFE99E28), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7956f0a5])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7956f0a5])
    SignalFlowHasStarted(flowId=[d529201b-adb0-40b7-86e6-a0fb48e6ef46])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4391929087683681377), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3469465620619038147), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4391929087683681377--5928746443603655242-0-0), senderUUID=ca0c357b-0e24-48e7-892d-d3f85948753f))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3469465620619038147): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@7956f0a5]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.512Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.516Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.536Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), maySkipCheckpoint=false, fiber=B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3, )
  Actions: 
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D1873A8672A4B2CDF94DBAA93A93D0116C6EA7E7CA24789AE53A832BAFE99E28)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.536Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3469465620619038147).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.557Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.580Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D, )
  Actions: 
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    B194FF764B651E8FCD0E080EB99CBCAE6C2550B0785D7AA408FEBE4B760190B3
    E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.580Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4391929087683681377), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--4391929087683681377--5928746443603655242-2-0), senderUUID=ca0c357b-0e24-48e7-892d-d3f85948753f))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.580Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.598Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.602Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), maySkipCheckpoint=false, fiber=01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC, )
  Actions: 
    PersistCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377)), errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))])
checkpoint.flowState.frozenFiber.hash: 
    E6E69D9AD45D672E7B80B1928566F0165A53A8E0A3EDCCDF52B29BE03FC2B69D
    01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.602Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.659Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3469465620619038147), payload=net.corda.node.services.statemachine.EndSessionMessage@2ff7ae50), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-3469465620619038147).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-4391929087683681377))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.661Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.661Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.666Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-194462380581302444, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.676Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.679Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] ---
  Timestamp: 2019-09-22T17:34:56.748Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-194462380581302444)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)], senderUUID=ca0c357b-0e24-48e7-892d-d3f85948753f)
    CreateTransaction
    RemoveCheckpoint(id=[d529201b-adb0-40b7-86e6-a0fb48e6ef46])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498])
    ReleaseSoftLocks(uuid=d529201b-adb0-40b7-86e6-a0fb48e6ef46)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-3469465620619038147)])
    RemoveFlow(flowId=[d529201b-adb0-40b7-86e6-a0fb48e6ef46], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-194462380581302444, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Invocation, sessionId=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, timestamp: 2019-09-22T17:34:56.460Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3469465620619038147)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--4391929087683681377--5928746443603655242)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3469465620619038147))]), frozenFiber=01EC0E52EC269596401420CF070B456C93A5E1DFCD4DD3FFF868CC579F8C92CC), errorState=Errored(errors=[FlowError(errorId=-194462380581302444, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@46b81495, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=ca0c357b-0e24-48e7-892d-d3f85948753f))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@72d55498]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
[WARN ] 2019-09-22T17:34:56,763Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [d529201b-adb0-40b7-86e6-a0fb48e6ef46] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=d529201b-adb0-40b7-86e6-a0fb48e6ef46, invocation_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, invocation_timestamp=2019-09-22T17:34:56.460Z, origin=O=Mock Company 1, L=London, C=GB, session_id=e0ab543c-29bc-40ba-83f6-11a5f7d8021d, session_timestamp=2019-09-22T17:34:56.460Z, thread-id=147, tx_id=EB4751EBCA50275E0E38879D23547424F6D7B2489192DC83FBC6F287F023F546}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3469465620619038147) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:37:12,243Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\adnanahmed\Documents\bootcamp-cordapp-4 ... {}
[INFO ] 2019-09-22T17:37:19,130Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173702.661\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:37:19,136Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173702.661/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:37:19,172Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173702.661/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:37:19,459Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:37:20,307Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:37:20,417Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:20,418Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:20,420Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:20,583Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:37:02.530Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:37:29,630Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:37:29,638Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173702.661\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:37:29,638Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:37:29,640Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:37:29,759Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:29,766Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:31,739Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:32,395Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:37:32,458Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:37:32,482Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:37:32,482Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:37:32,758Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:37:32,772Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:37:32,772Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:32,789Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:32,982Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:33,049Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:37:33,069Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:33,100Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:33,540Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:37:33,545Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:37:33,549Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:37:33,898Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:33,916Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:33,917Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:33,917Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:33,918Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:33,946Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173702.661\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:37:33,947Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173702.661/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:37:33,947Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173702.661/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:37:34,140Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:37:34,164Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:37:34,285Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:34,286Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:34,287Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:34,297Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:37:02.530Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:37:35,031Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:37:35,037Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173702.661\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:37:35,037Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:37:35,039Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:37:35,042Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:35,044Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:35,134Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:35,144Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:37:35,148Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:37:35,151Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:37:35,187Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:37:35,188Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:37:35,314Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:37:35,320Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:37:35,320Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:35,322Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:35,332Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:35,348Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:37:35,352Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:35,359Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:35,603Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:37:35,614Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:35,616Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:35,619Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:35,633Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:35,636Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:35,650Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:35,650Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:35,650Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:35,650Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:35,815Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173702.661\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:37:35,817Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173702.661/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:37:35,817Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173702.661/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:37:35,840Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:37:35,868Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:37:35,911Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:35,911Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:35,912Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:37:35,916Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:37:02.530Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:37:36,721Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:37:36,723Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173702.661\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:37:36,723Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:37:36,733Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:37:36,737Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:36,737Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:36,972Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:37:37,001Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:37:37,001Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:37:37,008Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:37:37,082Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:37:37,082Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:37:37,349Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:37:37,356Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:37:37,358Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:37,361Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:37,369Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:37,416Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:37:37,429Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:37,429Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:37,888Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:37:37,903Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:37,920Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173852772) {}
[INFO ] 2019-09-22T17:37:37,920Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:37,936Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:37,936Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:37,962Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173855320) {}
[INFO ] 2019-09-22T17:37:37,962Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:37,994Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:37,996Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:37:38,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:38,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:37:38,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173857356) {}
[INFO ] 2019-09-22T17:37:38,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:37:38,529Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:38,578Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:38,578Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:38,579Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:41,481Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:41,532Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:41,580Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:41,592Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:41,786Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147}
[WARN ] 2019-09-22T17:37:41,815Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:41,815Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:41,825Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:41,959Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:42,331Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[WARN ] 2019-09-22T17:37:42,346Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:42,396Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[WARN ] 2019-09-22T17:37:42,413Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:42,451Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:42,451Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=e8473bb9-023a-4643-bea0-d69e6a73b84e, invocation_id=c2613967-20b6-4644-a72c-fea3458ff6ed, invocation_timestamp=2019-09-22T17:37:38.088Z, origin=Only For Testing, session_id=c2613967-20b6-4644-a72c-fea3458ff6ed, session_timestamp=2019-09-22T17:37:38.088Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:42,515Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:37:42,525Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@614f0ab0, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=6585db67-268d-4ed4-83da-85dece80bf53) {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[INFO ] 2019-09-22T17:37:42,525Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] has error [0] {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:37:42,535Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] error allowed to propagate {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[WARN ] 2019-09-22T17:37:42,580Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] errored, dumping all transitions:

 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.262Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=C8853030FC7B5567A18B0A718171AF1446C4849E1A851BDE6AF73664857AE966), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685a4abc])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685a4abc])
    SignalFlowHasStarted(flowId=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8064597508038223879), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5036666287087963117), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8064597508038223879-5849766301266390150-0-0), senderUUID=6585db67-268d-4ed4-83da-85dece80bf53))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5036666287087963117): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685a4abc]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.264Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.264Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.313Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), maySkipCheckpoint=false, fiber=A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE, )
  Actions: 
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=C8853030FC7B5567A18B0A718171AF1446C4849E1A851BDE6AF73664857AE966)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.329Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5036666287087963117).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.346Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.379Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B, )
  Actions: 
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE
    A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.396Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8064597508038223879), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8064597508038223879-5849766301266390150-2-0), senderUUID=6585db67-268d-4ed4-83da-85dece80bf53))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.396Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.413Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.413Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), maySkipCheckpoint=false, fiber=0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87, )
  Actions: 
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))])
checkpoint.flowState.frozenFiber.hash: 
    A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B
    0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.413Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.515Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5036666287087963117), payload=net.corda.node.services.statemachine.EndSessionMessage@1e88d41e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5036666287087963117).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8064597508038223879))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.515Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.515Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.535Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3779921079304793447, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.546Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.546Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[WARN ] 2019-09-22T17:37:42,580Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:37:42,584Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[WARN ] 2019-09-22T17:37:42,647Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] errored, dumping all transitions:

 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.262Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=C8853030FC7B5567A18B0A718171AF1446C4849E1A851BDE6AF73664857AE966), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685a4abc])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685a4abc])
    SignalFlowHasStarted(flowId=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8064597508038223879), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-5036666287087963117), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8064597508038223879-5849766301266390150-0-0), senderUUID=6585db67-268d-4ed4-83da-85dece80bf53))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5036666287087963117): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@685a4abc]
    []
isAnyCheckpointPersisted: 
    false
    true


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.264Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.264Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.313Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), maySkipCheckpoint=false, fiber=A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE, )
  Actions: 
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=C8853030FC7B5567A18B0A718171AF1446C4849E1A851BDE6AF73664857AE966)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE)
checkpoint.numberOfSuspends: 
    0
    1


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.329Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-5036666287087963117).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.346Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.379Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B, )
  Actions: 
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    A5E0DB5C8EBE2CD920D7854CEEC91237335DC78DAF4ACBAB64C7443090609EBE
    A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B
checkpoint.numberOfSuspends: 
    1
    2


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.396Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8064597508038223879), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8064597508038223879-5849766301266390150-2-0), senderUUID=6585db67-268d-4ed4-83da-85dece80bf53))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.396Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.413Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.413Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), maySkipCheckpoint=false, fiber=0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87, )
  Actions: 
    PersistCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8064597508038223879)), errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))])
checkpoint.flowState.frozenFiber.hash: 
    A83D0E187C87573F807E0C84C5FAAAADF96FE7FD002D184F545B0289D83C592B
    0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87
checkpoint.numberOfSuspends: 
    2
    3


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.413Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.515Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-5036666287087963117), payload=net.corda.node.services.statemachine.EndSessionMessage@1e88d41e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-5036666287087963117).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8064597508038223879))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.515Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.515Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.535Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=3779921079304793447, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.546Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.546Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] ---
  Timestamp: 2019-09-22T17:37:42.634Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=3779921079304793447)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)], senderUUID=6585db67-268d-4ed4-83da-85dece80bf53)
    CreateTransaction
    RemoveCheckpoint(id=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea])
    ReleaseSoftLocks(uuid=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-5036666287087963117)])
    RemoveFlow(flowId=[596a7eb9-47e1-4004-b458-9dc0e9b0c7b9], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=3779921079304793447, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Invocation, sessionId=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, timestamp: 2019-09-22T17:37:42.197Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-5036666287087963117)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8064597508038223879-5849766301266390150)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-5036666287087963117))]), frozenFiber=0DA87C2FD059E5A2EC748EC7545E871906603021C9ED219F0B44F745E6652C87), errorState=Errored(errors=[FlowError(errorId=3779921079304793447, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@614f0ab0, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=6585db67-268d-4ed4-83da-85dece80bf53))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@541c4ea]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
[WARN ] 2019-09-22T17:37:42,647Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [596a7eb9-47e1-4004-b458-9dc0e9b0c7b9] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=596a7eb9-47e1-4004-b458-9dc0e9b0c7b9, invocation_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, invocation_timestamp=2019-09-22T17:37:42.197Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8dc1a9a6-2a4f-4bb3-b1c6-b16c7ff465b3, session_timestamp=2019-09-22T17:37:42.197Z, thread-id=147, tx_id=737808FF760CCA0ACCF807C764EB22F84E01AA9D0768FC209CE2FACD2332130F}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-5036666287087963117) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:39:13,155Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\adnanahmed\Documents\bootcamp-cordapp-4 ... {}
[INFO ] 2019-09-22T17:39:19,373Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173907.395\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:39:19,386Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173907.395/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:39:19,414Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173907.395/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:39:19,671Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:39:20,427Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:39:20,509Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:20,509Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:20,517Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:20,672Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:39:07.338Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:39:25,037Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:39:25,055Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173907.395\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:39:25,055Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:39:25,067Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:39:25,179Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:25,196Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:27,107Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:27,737Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:39:27,815Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:39:27,839Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:39:27,839Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:39:28,140Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:39:28,158Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:39:28,158Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:28,167Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:28,312Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:28,392Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:39:28,412Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:28,443Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:28,835Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:39:28,841Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:39:28,843Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:39:29,163Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:29,180Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:29,188Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:29,188Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:29,189Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:29,220Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173907.395\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:39:29,221Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173907.395/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:39:29,221Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173907.395/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:39:29,402Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:39:29,446Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:39:29,565Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:29,565Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:29,566Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:29,572Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:39:07.338Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:39:30,287Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:39:30,292Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173907.395\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:39:30,292Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:39:30,292Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:39:30,301Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:30,302Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:30,383Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:30,394Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:39:30,398Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:39:30,399Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:39:30,433Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:39:30,434Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:39:30,554Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:39:30,561Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:39:30,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:30,564Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:30,575Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:30,593Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:39:30,598Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:30,604Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:30,855Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:39:30,865Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:30,868Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:30,871Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:30,887Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:30,889Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:30,901Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:30,901Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:30,901Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:30,901Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:30,912Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-173907.395\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:39:30,913Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173907.395/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:39:30,913Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-173907.395/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:39:31,076Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:39:31,104Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:39:31,148Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:31,148Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:31,148Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:39:31,153Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:39:07.338Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:39:31,731Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:39:31,733Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-173907.395\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:39:31,733Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:39:31,736Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:39:31,740Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:31,740Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:31,818Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:39:31,828Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:39:31,832Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:39:31,833Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:39:31,869Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:39:31,869Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:39:31,993Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:39:32,012Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:39:32,012Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,016Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:32,024Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,039Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:39:32,043Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,051Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:32,466Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:39:32,480Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,483Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569173968158) {}
[INFO ] 2019-09-22T17:39:32,485Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:32,497Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,499Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:32,508Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569173970561) {}
[INFO ] 2019-09-22T17:39:32,510Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:32,518Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,520Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:39:32,529Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,529Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:39:32,529Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569173972012) {}
[INFO ] 2019-09-22T17:39:32,529Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:39:32,726Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:32,752Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:32,752Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:32,756Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:34,046Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:34,072Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:34,091Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:34,096Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:34,179Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147}
[WARN ] 2019-09-22T17:39:34,192Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,199Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,199Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,250Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,433Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[WARN ] 2019-09-22T17:39:34,445Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,474Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[WARN ] 2019-09-22T17:39:34,485Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,507Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,507Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=f2a7378a-9a14-4675-9f58-328154075df9, invocation_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, invocation_timestamp=2019-09-22T17:39:32.558Z, origin=Only For Testing, session_id=e0e4c5ee-3409-4894-87e3-adfd421f4369, session_timestamp=2019-09-22T17:39:32.558Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,556Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:39:34,560Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7b996a04, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=2438dce1-3ff3-4343-b88e-fa3a1b56989e) {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[INFO ] 2019-09-22T17:39:34,564Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] has error [0] {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:39:34,564Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] error allowed to propagate {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[WARN ] 2019-09-22T17:39:34,594Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] errored, dumping all transitions:

 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.399Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=FA6A493A79EDB451AA2DA94E8213932961AFC28D40C5B033E178C9CEC330CB83), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3b18e4a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3b18e4a])
    SignalFlowHasStarted(flowId=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8998773893863643155), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4882590632750831447), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8998773893863643155--2030608246958062679-0-0), senderUUID=2438dce1-3ff3-4343-b88e-fa3a1b56989e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3b18e4a]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4882590632750831447): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.401Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.407Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.425Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), maySkipCheckpoint=false, fiber=1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951, )
  Actions: 
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=FA6A493A79EDB451AA2DA94E8213932961AFC28D40C5B033E178C9CEC330CB83)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951)
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.431Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4882590632750831447).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.446Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.457Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061, )
  Actions: 
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951
    CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.474Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8998773893863643155), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8998773893863643155--2030608246958062679-2-0), senderUUID=2438dce1-3ff3-4343-b88e-fa3a1b56989e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.474Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.488Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.493Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), maySkipCheckpoint=false, fiber=E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E, )
  Actions: 
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))])
checkpoint.flowState.frozenFiber.hash: 
    CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061
    E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.494Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.552Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4882590632750831447), payload=net.corda.node.services.statemachine.EndSessionMessage@52876fcf), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54]
checkpoint.sessions.SessionId(toLong=-4882590632750831447).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155))
    Ended


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.552Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.556Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.564Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4317252829158888282, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.574Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.576Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[WARN ] 2019-09-22T17:39:34,594Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:39:34,594Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[WARN ] 2019-09-22T17:39:34,625Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] errored, dumping all transitions:

 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.399Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=FA6A493A79EDB451AA2DA94E8213932961AFC28D40C5B033E178C9CEC330CB83), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3b18e4a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3b18e4a])
    SignalFlowHasStarted(flowId=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8998773893863643155), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4882590632750831447), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8998773893863643155--2030608246958062679-0-0), senderUUID=2438dce1-3ff3-4343-b88e-fa3a1b56989e))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@3b18e4a]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-4882590632750831447): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.401Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.407Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.425Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), maySkipCheckpoint=false, fiber=1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951, )
  Actions: 
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=FA6A493A79EDB451AA2DA94E8213932961AFC28D40C5B033E178C9CEC330CB83)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951)
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.431Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4882590632750831447).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.446Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.457Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061, )
  Actions: 
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1295163290A90BDEF8E6DDFD77E7D5B31BCD9D72A7E868DC83241C361C63D951
    CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.474Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8998773893863643155), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--8998773893863643155--2030608246958062679-2-0), senderUUID=2438dce1-3ff3-4343-b88e-fa3a1b56989e))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.474Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.488Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.493Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), maySkipCheckpoint=false, fiber=E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E, )
  Actions: 
    PersistCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155)), errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))])
checkpoint.flowState.frozenFiber.hash: 
    CFB6B88D81E8C64A5B405756A0E390CE71865D4EEBBEB2380219E2B46D323061
    E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.494Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.552Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4882590632750831447), payload=net.corda.node.services.statemachine.EndSessionMessage@52876fcf), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54]
checkpoint.sessions.SessionId(toLong=-4882590632750831447).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-8998773893863643155))
    Ended


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.552Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.556Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.564Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4317252829158888282, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.574Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.576Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] ---
  Timestamp: 2019-09-22T17:39:34.625Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4317252829158888282)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)], senderUUID=2438dce1-3ff3-4343-b88e-fa3a1b56989e)
    CreateTransaction
    RemoveCheckpoint(id=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54])
    ReleaseSoftLocks(uuid=662db059-e338-4c9c-8cb1-41f9b6a1e2ac)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4882590632750831447)])
    RemoveFlow(flowId=[662db059-e338-4c9c-8cb1-41f9b6a1e2ac], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4317252829158888282, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Invocation, sessionId=8d5aa248-3aa3-49bd-b40d-cb0592068792, timestamp: 2019-09-22T17:39:34.364Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4882590632750831447)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--8998773893863643155--2030608246958062679)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4882590632750831447))]), frozenFiber=E286E2767BF0170ED6A83D2EAB2E85B7C93C63E31E9F17262FE7B5A48843818E), errorState=Errored(errors=[FlowError(errorId=4317252829158888282, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7b996a04, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=2438dce1-3ff3-4343-b88e-fa3a1b56989e))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@65860b54]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
[WARN ] 2019-09-22T17:39:34,625Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [662db059-e338-4c9c-8cb1-41f9b6a1e2ac] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=662db059-e338-4c9c-8cb1-41f9b6a1e2ac, invocation_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, invocation_timestamp=2019-09-22T17:39:34.364Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8d5aa248-3aa3-49bd-b40d-cb0592068792, session_timestamp=2019-09-22T17:39:34.364Z, thread-id=147, tx_id=4F3288DF373949BBA72A2205C3FC3078BD57E0A5AE16F3EF4509CD02A64E9197}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4882590632750831447) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:07,824Z [Test worker] internal.TestCordappImpl.apply - Generating CorDapp jar from local project in C:\Users\adnanahmed\Documents\bootcamp-cordapp-4 ... {}
[INFO ] 2019-09-22T17:42:14,051Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174201.959\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:42:14,067Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174201.959/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:14,102Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174201.959/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:14,371Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:15,117Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:15,196Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:15,197Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:15,198Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:15,350Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:01.898Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:19,904Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:19,905Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174201.959\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:19,911Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:19,913Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:19,993Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:20,000Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:21,925Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:22,541Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:22,629Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:22,658Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:22,658Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:22,934Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:22,945Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:22,945Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:22,959Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:23,117Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:23,196Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:23,218Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:23,261Z [MockNode-1-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:23,561Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:23,568Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:42:23,570Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:42:23,909Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:23,927Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:23,928Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:23,929Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:23,929Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:23,958Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174201.959\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:42:23,958Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174201.959/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:23,960Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174201.959/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:24,214Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:24,229Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:24,283Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:24,283Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:24,283Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:24,288Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:01.898Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:24,989Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:24,997Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174201.959\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:24,997Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:24,999Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:25,010Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:25,010Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:25,103Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:25,118Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:25,122Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:25,124Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:25,155Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:25,155Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:25,266Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:25,280Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:25,280Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:25,283Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:25,294Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:25,327Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:25,332Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:25,340Z [MockNode-2-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:25,807Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:25,823Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:25,828Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:25,830Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:25,841Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:25,842Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:25,851Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:25,852Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:25,852Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:25,852Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:25,881Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174201.959\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:42:25,881Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174201.959/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:25,881Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174201.959/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:26,159Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:26,196Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:26,262Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:26,264Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:26,264Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:26,268Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:01.898Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:26,854Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:26,856Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174201.959\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:26,856Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:26,860Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:26,868Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:26,868Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:26,942Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:26,958Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:26,963Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:26,963Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:26,994Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:26,994Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:27,113Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:27,118Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:27,118Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,120Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:27,126Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,159Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:27,162Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,169Z [MockNode-3-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:27,577Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:27,595Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,598Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174142945) {}
[INFO ] 2019-09-22T17:42:27,600Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:27,612Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,614Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:27,628Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174145280) {}
[INFO ] 2019-09-22T17:42:27,629Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:27,641Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,643Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:27,655Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:27,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174147118) {}
[INFO ] 2019-09-22T17:42:27,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:42:27,932Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:27,958Z [Mock network] transactions.TransactionBuilder.warnOnce - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:27,958Z [Mock network] transactions.TransactionBuilder.warnOnce - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:27,962Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:29,309Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:29,332Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:29,353Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:29,359Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:29,439Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146}
[WARN ] 2019-09-22T17:42:29,451Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,454Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,454Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,509Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,700Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[WARN ] 2019-09-22T17:42:29,711Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,744Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[WARN ] 2019-09-22T17:42:29,749Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,773Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,773Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=c8aa5ab6-802d-404c-b02e-bb469f50da7d, invocation_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, invocation_timestamp=2019-09-22T17:42:27.693Z, origin=Only For Testing, session_id=a2ed1bef-72fc-4944-9a91-bab4ec8d861f, session_timestamp=2019-09-22T17:42:27.693Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,810Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:29,815Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [24dbe41e-9154-4959-9366-9c0599a52675] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@30bb843b, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=43d43417-e372-418c-9a4f-9d8652cba047) {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[INFO ] 2019-09-22T17:42:29,816Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [24dbe41e-9154-4959-9366-9c0599a52675] has error [0] {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:29,816Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [24dbe41e-9154-4959-9366-9c0599a52675] error allowed to propagate {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[WARN ] 2019-09-22T17:42:29,851Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24dbe41e-9154-4959-9366-9c0599a52675] errored, dumping all transitions:

 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.662Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=BF6BD673F4A05509227C5F497C683A5B65BE3CB3D444AC2EAD9A196DAC489497), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@139b9527])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@139b9527])
    SignalFlowHasStarted(flowId=[24dbe41e-9154-4959-9366-9c0599a52675])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1398251555461418388), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7707013915132750104), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1398251555461418388-2521172032363745075-0-0), senderUUID=43d43417-e372-418c-9a4f-9d8652cba047))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7707013915132750104): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@139b9527]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.668Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.672Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.694Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), maySkipCheckpoint=false, fiber=B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC, )
  Actions: 
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=BF6BD673F4A05509227C5F497C683A5B65BE3CB3D444AC2EAD9A196DAC489497)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.697Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7707013915132750104).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.711Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.736Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629, )
  Actions: 
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC
    5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.741Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1398251555461418388), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1398251555461418388-2521172032363745075-2-0), senderUUID=43d43417-e372-418c-9a4f-9d8652cba047))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.742Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.753Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.759Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), maySkipCheckpoint=false, fiber=F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB, )
  Actions: 
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629
    F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.759Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.809Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7707013915132750104), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7707013915132750104).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.810Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.810Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.822Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4323280933518956545, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.827Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.827Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[WARN ] 2019-09-22T17:42:29,851Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24dbe41e-9154-4959-9366-9c0599a52675] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:42:29,859Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[WARN ] 2019-09-22T17:42:29,901Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24dbe41e-9154-4959-9366-9c0599a52675] errored, dumping all transitions:

 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.662Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=BF6BD673F4A05509227C5F497C683A5B65BE3CB3D444AC2EAD9A196DAC489497), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@139b9527])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@139b9527])
    SignalFlowHasStarted(flowId=[24dbe41e-9154-4959-9366-9c0599a52675])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1398251555461418388), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7707013915132750104), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1398251555461418388-2521172032363745075-0-0), senderUUID=43d43417-e372-418c-9a4f-9d8652cba047))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7707013915132750104): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@139b9527]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.668Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.672Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.694Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), maySkipCheckpoint=false, fiber=B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC, )
  Actions: 
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=BF6BD673F4A05509227C5F497C683A5B65BE3CB3D444AC2EAD9A196DAC489497)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.697Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7707013915132750104).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.711Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.736Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629, )
  Actions: 
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    B5521E4623B5E136D38F470276744ACA5E7A1C2D55D6A02EA1C4F3C105E259BC
    5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.741Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-1398251555461418388), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--1398251555461418388-2521172032363745075-2-0), senderUUID=43d43417-e372-418c-9a4f-9d8652cba047))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.742Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.753Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.759Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), maySkipCheckpoint=false, fiber=F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB, )
  Actions: 
    PersistCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388)), errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    5FE9E1BFE29FCC32616C1691A2EE5963B0E992C7E19BB982A843503B5CC62629
    F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.759Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.809Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7707013915132750104), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7707013915132750104).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-1398251555461418388))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.810Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.810Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.822Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4323280933518956545, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.827Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.827Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [24dbe41e-9154-4959-9366-9c0599a52675] ---
  Timestamp: 2019-09-22T17:42:29.896Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4323280933518956545)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)], senderUUID=43d43417-e372-418c-9a4f-9d8652cba047)
    CreateTransaction
    RemoveCheckpoint(id=[24dbe41e-9154-4959-9366-9c0599a52675])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83])
    ReleaseSoftLocks(uuid=24dbe41e-9154-4959-9366-9c0599a52675)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7707013915132750104)])
    RemoveFlow(flowId=[24dbe41e-9154-4959-9366-9c0599a52675], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4323280933518956545, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Invocation, sessionId=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, timestamp: 2019-09-22T17:42:29.628Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7707013915132750104)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--1398251555461418388-2521172032363745075)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7707013915132750104))]), frozenFiber=F47AAF7F38F921DC0C0A9743C6DD6902EC903A2856C53811FB962AA02458D6DB), errorState=Errored(errors=[FlowError(errorId=4323280933518956545, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@30bb843b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=43d43417-e372-418c-9a4f-9d8652cba047))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@30fcff83]
    []
 {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
[WARN ] 2019-09-22T17:42:29,901Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [24dbe41e-9154-4959-9366-9c0599a52675] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000002, flow-id=24dbe41e-9154-4959-9366-9c0599a52675, invocation_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, invocation_timestamp=2019-09-22T17:42:29.628Z, origin=O=Mock Company 1, L=London, C=GB, session_id=0940107d-0fb7-4c56-acb1-eee93dbd4ce3, session_timestamp=2019-09-22T17:42:29.628Z, thread-id=146, tx_id=80550F5F0978030E090D279F278F79E6C3E2E65FBD140E19D5DCB8CB0FC35842}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7707013915132750104) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:30,148Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174229.982\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:42:30,150Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174229.982/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:30,150Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174229.982/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:30,373Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:30,404Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:30,415Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:30,415Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:30,415Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:30,420Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:29.982Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:30,938Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:30,941Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174229.982\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:30,941Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:30,946Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:30,953Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:30,954Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:31,053Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:31,065Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:31,091Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:31,101Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:31,103Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:31,242Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:31,249Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:31,249Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:31,252Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:31,269Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:31,286Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:31,291Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:31,299Z [MockNode-4-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:31,720Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:31,722Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:42:31,722Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:42:31,727Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:31,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:31,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:31,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:31,730Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:31,759Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174229.982\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:42:31,760Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174229.982/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:31,761Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174229.982/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:32,061Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:32,090Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:32,157Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:32,157Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:32,157Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:32,161Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:29.982Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:32,574Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:32,577Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174229.982\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:32,577Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:32,581Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:32,585Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:32,585Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:32,665Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:32,676Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:32,679Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:32,681Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:32,711Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:32,711Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:32,800Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:32,812Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:32,813Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:32,815Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:32,821Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:32,837Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:32,843Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:32,849Z [MockNode-5-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:33,286Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:33,297Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:33,300Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:33,302Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:33,312Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:33,313Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:33,321Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:33,321Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:33,321Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:33,322Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:33,346Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174229.982\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:42:33,346Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174229.982/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:33,348Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174229.982/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:33,588Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:33,607Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:33,663Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:33,663Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:33,663Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:33,672Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:29.982Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:34,185Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:34,188Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174229.982\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:34,188Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:34,193Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:34,197Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:34,197Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:34,325Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:34,335Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:34,337Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:34,339Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:34,363Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:34,363Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:34,466Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:34,476Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:34,477Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,479Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:34,486Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,522Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:34,527Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,532Z [MockNode-6-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:34,898Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:34,905Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,910Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174151249) {}
[INFO ] 2019-09-22T17:42:34,912Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:34,922Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,924Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:34,935Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174152812) {}
[INFO ] 2019-09-22T17:42:34,936Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:34,945Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,947Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:34,953Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,953Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:34,953Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174154476) {}
[INFO ] 2019-09-22T17:42:34,953Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:42:34,959Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281}
[WARN ] 2019-09-22T17:42:34,962Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281}
[WARN ] 2019-09-22T17:42:35,708Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281}
[WARN ] 2019-09-22T17:42:35,711Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281}
[WARN ] 2019-09-22T17:42:35,714Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281}
[WARN ] 2019-09-22T17:42:35,717Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281}
[WARN ] 2019-09-22T17:42:35,737Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281}
[WARN ] 2019-09-22T17:42:35,742Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,743Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,743Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,759Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,799Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[WARN ] 2019-09-22T17:42:35,799Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,808Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[WARN ] 2019-09-22T17:42:35,813Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,825Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,825Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000003, flow-id=3da53ce7-b8d9-44ff-9087-33a7ee63f057, invocation_id=07685e69-dc66-4d9b-9856-671d131c04c8, invocation_timestamp=2019-09-22T17:42:34.955Z, origin=Only For Testing, session_id=07685e69-dc66-4d9b-9856-671d131c04c8, session_timestamp=2019-09-22T17:42:34.955Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,833Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:35,833Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@12aa0242, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=7439675b-e2af-4e9a-9858-de4f071ad14c) {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[INFO ] 2019-09-22T17:42:35,833Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] has error [0] {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:35,833Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] error allowed to propagate {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[WARN ] 2019-09-22T17:42:35,839Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] errored, dumping all transitions:

 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.791Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4A5ACFEFC3C41261FD1CF5D564B15771399E0E93E2B40439DE5223D2A66A4768), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fec7a76])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fec7a76])
    SignalFlowHasStarted(flowId=[172bbf74-1dcd-4a33-9698-0ee80d652d34])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8069247955361813169), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4013078202708903964), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8069247955361813169--1038365611475150843-0-0), senderUUID=7439675b-e2af-4e9a-9858-de4f071ad14c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4013078202708903964): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fec7a76]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.792Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.792Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.796Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), maySkipCheckpoint=false, fiber=563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46, )
  Actions: 
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4A5ACFEFC3C41261FD1CF5D564B15771399E0E93E2B40439DE5223D2A66A4768)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.797Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4013078202708903964).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.800Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.806Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC, )
  Actions: 
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46
    0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.807Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8069247955361813169), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8069247955361813169--1038365611475150843-2-0), senderUUID=7439675b-e2af-4e9a-9858-de4f071ad14c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.807Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.813Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.817Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), maySkipCheckpoint=false, fiber=54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506, )
  Actions: 
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC
    54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.817Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.832Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4013078202708903964), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4013078202708903964).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8069247955361813169))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.833Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.833Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.833Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7171118516401228232, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.834Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.834Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[WARN ] 2019-09-22T17:42:35,839Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:42:35,839Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[WARN ] 2019-09-22T17:42:35,849Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] errored, dumping all transitions:

 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.791Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=4A5ACFEFC3C41261FD1CF5D564B15771399E0E93E2B40439DE5223D2A66A4768), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fec7a76])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fec7a76])
    SignalFlowHasStarted(flowId=[172bbf74-1dcd-4a33-9698-0ee80d652d34])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8069247955361813169), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4013078202708903964), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8069247955361813169--1038365611475150843-0-0), senderUUID=7439675b-e2af-4e9a-9858-de4f071ad14c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4013078202708903964): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1fec7a76]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.792Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.792Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.796Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), maySkipCheckpoint=false, fiber=563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46, )
  Actions: 
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=4A5ACFEFC3C41261FD1CF5D564B15771399E0E93E2B40439DE5223D2A66A4768)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.797Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4013078202708903964).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.800Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.806Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC, )
  Actions: 
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    563B41F212BDC7CAD87C9D9AE618C4A4EFAD947ADF5A6747A3942E8C8CDA4E46
    0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.807Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8069247955361813169), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8069247955361813169--1038365611475150843-2-0), senderUUID=7439675b-e2af-4e9a-9858-de4f071ad14c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.807Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.813Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.817Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), maySkipCheckpoint=false, fiber=54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506, )
  Actions: 
    PersistCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8069247955361813169)), errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    0CF6AB052D95B4143BED37E1B2216306D25EFD32CBEAF451434BA85EC16D34FC
    54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.817Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.832Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4013078202708903964), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4013078202708903964).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8069247955361813169))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.833Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.833Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.833Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-7171118516401228232, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.834Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.834Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] ---
  Timestamp: 2019-09-22T17:42:35.846Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-7171118516401228232)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)], senderUUID=7439675b-e2af-4e9a-9858-de4f071ad14c)
    CreateTransaction
    RemoveCheckpoint(id=[172bbf74-1dcd-4a33-9698-0ee80d652d34])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b])
    ReleaseSoftLocks(uuid=172bbf74-1dcd-4a33-9698-0ee80d652d34)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4013078202708903964)])
    RemoveFlow(flowId=[172bbf74-1dcd-4a33-9698-0ee80d652d34], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-7171118516401228232, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Invocation, sessionId=7df62ee9-14e5-4073-b612-b80afada546b, timestamp: 2019-09-22T17:42:35.782Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4013078202708903964)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8069247955361813169--1038365611475150843)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4013078202708903964))]), frozenFiber=54AD6840B70A47241BA67C51CBD3B39454C4FDA16F56FA34385D6C7494887506), errorState=Errored(errors=[FlowError(errorId=-7171118516401228232, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@12aa0242, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=7439675b-e2af-4e9a-9858-de4f071ad14c))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@9b41d0b]
    []
 {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
[WARN ] 2019-09-22T17:42:35,849Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [172bbf74-1dcd-4a33-9698-0ee80d652d34] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000004, flow-id=172bbf74-1dcd-4a33-9698-0ee80d652d34, invocation_id=7df62ee9-14e5-4073-b612-b80afada546b, invocation_timestamp=2019-09-22T17:42:35.782Z, origin=O=Mock Company 1, L=London, C=GB, session_id=7df62ee9-14e5-4073-b612-b80afada546b, session_timestamp=2019-09-22T17:42:35.782Z, thread-id=281, tx_id=BC1CB7A3A4B685F49BA1002615E4E56AB6DF2C3CB584C0F669AC041D20344253}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4013078202708903964) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:36,229Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174236.139\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:42:36,231Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174236.139/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:36,231Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174236.139/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:36,420Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:36,431Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:36,443Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:36,443Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:36,443Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:36,448Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:36.138Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:36,879Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:36,881Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174236.139\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:36,881Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:36,881Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:36,889Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:36,891Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:36,985Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:36,995Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:37,025Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:37,032Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:37,032Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:37,147Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:37,153Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:37,153Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:37,156Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:37,167Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:37,192Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:37,197Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:37,204Z [MockNode-7-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:37,471Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:37,474Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:42:37,474Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:42:37,481Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:37,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:37,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:37,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:37,484Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:37,512Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174236.139\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:42:37,513Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174236.139/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:37,514Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174236.139/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:37,692Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:37,722Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:37,764Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:37,765Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:37,765Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:37,770Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:36.138Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:38,245Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:38,247Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174236.139\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:38,247Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:38,249Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:38,252Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:38,252Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:38,360Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:38,368Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:38,371Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:38,372Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:38,408Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:38,408Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:38,528Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:38,533Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:38,534Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:38,535Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:38,542Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:38,557Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:38,562Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:38,567Z [MockNode-8-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:39,002Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:39,012Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:39,016Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:39,017Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:39,027Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:39,028Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:39,035Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:39,035Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:39,036Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:39,036Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:39,061Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174236.139\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:42:39,062Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174236.139/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:39,062Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174236.139/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:39,324Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:39,357Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:39,427Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:39,427Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:39,428Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:39,433Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:36.138Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:39,872Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:39,882Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174236.139\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:39,882Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:39,885Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:39,887Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:39,887Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:39,959Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:39,965Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:39,968Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:39,968Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:39,991Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:39,991Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:40,060Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:40,065Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:40,065Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,066Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:40,071Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,081Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:40,084Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,088Z [MockNode-9-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:40,523Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:40,530Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,532Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174157153) {}
[INFO ] 2019-09-22T17:42:40,533Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:40,539Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,540Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:40,546Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174158533) {}
[INFO ] 2019-09-22T17:42:40,548Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:40,553Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,554Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:40,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:40,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174160065) {}
[INFO ] 2019-09-22T17:42:40,561Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:42:40,566Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412}
[WARN ] 2019-09-22T17:42:40,568Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412}
[WARN ] 2019-09-22T17:42:41,103Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412}
[WARN ] 2019-09-22T17:42:41,107Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412}
[WARN ] 2019-09-22T17:42:41,109Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412}
[WARN ] 2019-09-22T17:42:41,112Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412}
[WARN ] 2019-09-22T17:42:41,126Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412}
[WARN ] 2019-09-22T17:42:41,140Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,140Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,140Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,155Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,200Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[WARN ] 2019-09-22T17:42:41,201Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,209Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[WARN ] 2019-09-22T17:42:41,215Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,225Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,225Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000005, flow-id=16fcfb43-822d-4aa3-9eaf-a30561e4ad98, invocation_id=318b8082-f41b-446d-883d-c1b3e70a0926, invocation_timestamp=2019-09-22T17:42:40.562Z, origin=Only For Testing, session_id=318b8082-f41b-446d-883d-c1b3e70a0926, session_timestamp=2019-09-22T17:42:40.562Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,231Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:41,232Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@47ca07b0, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=afcb7f67-fd23-49ad-8d41-3f68440f3427) {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[INFO ] 2019-09-22T17:42:41,232Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] has error [0] {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:41,232Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] error allowed to propagate {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[WARN ] 2019-09-22T17:42:41,236Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] errored, dumping all transitions:

 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.184Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=352B09B630BC4494461A4A739862BF383A460F2C62E62EDA0759BD5549E8E8C9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@594ad80f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@594ad80f])
    SignalFlowHasStarted(flowId=[3e04be56-dec1-4f78-b998-4c2efeaeee9a])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5597921384694277922), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8279868248311377958), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5597921384694277922-9002211760683717758-0-0), senderUUID=afcb7f67-fd23-49ad-8d41-3f68440f3427))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8279868248311377958): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@594ad80f]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.184Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.184Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.197Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), maySkipCheckpoint=false, fiber=075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2, )
  Actions: 
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=352B09B630BC4494461A4A739862BF383A460F2C62E62EDA0759BD5549E8E8C9)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.197Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8279868248311377958).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.201Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.209Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B, )
  Actions: 
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2
    E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.209Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5597921384694277922), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5597921384694277922-9002211760683717758-2-0), senderUUID=afcb7f67-fd23-49ad-8d41-3f68440f3427))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.209Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.216Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.218Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), maySkipCheckpoint=false, fiber=99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83, )
  Actions: 
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B
    99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.219Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.231Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8279868248311377958), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8279868248311377958).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5597921384694277922))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.231Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.231Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.232Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6424145811455781175, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.232Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.233Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[WARN ] 2019-09-22T17:42:41,236Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:42:41,236Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[WARN ] 2019-09-22T17:42:41,244Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] errored, dumping all transitions:

 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.184Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=352B09B630BC4494461A4A739862BF383A460F2C62E62EDA0759BD5549E8E8C9), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@594ad80f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@594ad80f])
    SignalFlowHasStarted(flowId=[3e04be56-dec1-4f78-b998-4c2efeaeee9a])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5597921384694277922), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-8279868248311377958), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5597921384694277922-9002211760683717758-0-0), senderUUID=afcb7f67-fd23-49ad-8d41-3f68440f3427))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8279868248311377958): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@594ad80f]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.184Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.184Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.197Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), maySkipCheckpoint=false, fiber=075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2, )
  Actions: 
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=352B09B630BC4494461A4A739862BF383A460F2C62E62EDA0759BD5549E8E8C9)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.197Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8279868248311377958).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.201Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.209Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B, )
  Actions: 
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    075985988320C110E42E5C972DBFFB96DEFB09F04796D4063561224ECB5E6AA2
    E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.209Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5597921384694277922), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5597921384694277922-9002211760683717758-2-0), senderUUID=afcb7f67-fd23-49ad-8d41-3f68440f3427))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.209Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.216Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.218Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), maySkipCheckpoint=false, fiber=99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83, )
  Actions: 
    PersistCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5597921384694277922)), errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    E20F19FE5AC5F6EC2644317FA42BFD9B834CD88C375E1816955F10E32BA5CF2B
    99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.219Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.231Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-8279868248311377958), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-8279868248311377958).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5597921384694277922))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.231Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.231Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.232Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6424145811455781175, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.232Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.233Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] ---
  Timestamp: 2019-09-22T17:42:41.243Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-6424145811455781175)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)], senderUUID=afcb7f67-fd23-49ad-8d41-3f68440f3427)
    CreateTransaction
    RemoveCheckpoint(id=[3e04be56-dec1-4f78-b998-4c2efeaeee9a])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d])
    ReleaseSoftLocks(uuid=3e04be56-dec1-4f78-b998-4c2efeaeee9a)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-8279868248311377958)])
    RemoveFlow(flowId=[3e04be56-dec1-4f78-b998-4c2efeaeee9a], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6424145811455781175, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Invocation, sessionId=2bfd7034-760f-469f-b68f-25e0ba016d2f, timestamp: 2019-09-22T17:42:41.180Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-8279868248311377958)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5597921384694277922-9002211760683717758)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-8279868248311377958))]), frozenFiber=99B6DEFC90A30ABDF484FA2C97F407F5F6B40D3814D2A8DEF2B0347867584F83), errorState=Errored(errors=[FlowError(errorId=-6424145811455781175, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@47ca07b0, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=afcb7f67-fd23-49ad-8d41-3f68440f3427))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@1b6d031d]
    []
 {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
[WARN ] 2019-09-22T17:42:41,244Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [3e04be56-dec1-4f78-b998-4c2efeaeee9a] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000006, flow-id=3e04be56-dec1-4f78-b998-4c2efeaeee9a, invocation_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, invocation_timestamp=2019-09-22T17:42:41.180Z, origin=O=Mock Company 1, L=London, C=GB, session_id=2bfd7034-760f-469f-b68f-25e0ba016d2f, session_timestamp=2019-09-22T17:42:41.180Z, thread-id=412, tx_id=D477A45C78B7B8246F06CE8D93B92B1AEF9AA301805D60895E4C34D6912744D6}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-8279868248311377958) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:41,369Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174241.260\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:42:41,370Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174241.260/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:41,371Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174241.260/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:41,595Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:41,625Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:41,635Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:41,635Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:41,635Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:41,640Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:41.260Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:42,068Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:42,070Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174241.260\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:42,070Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:42,073Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:42,076Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:42,077Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:42,146Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:42,161Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:42,200Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:42,210Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:42,211Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:42,339Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:42,344Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:42,344Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:42,349Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:42,360Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:42,381Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:42,387Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:42,392Z [MockNode-10-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:42,812Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:42,815Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:42:42,816Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:42:42,822Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:42,826Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:42,827Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:42,827Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:42,827Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:43,141Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174241.260\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:42:43,143Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174241.260/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:43,144Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174241.260/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:43,172Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:43,188Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:43,239Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:43,240Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:43,240Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:43,242Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:41.260Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:43,528Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:43,538Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174241.260\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:43,539Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:43,540Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:43,542Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:43,542Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:43,593Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:43,601Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:43,608Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:43,609Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:43,630Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:43,630Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:43,694Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:43,710Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:43,710Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:43,712Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:43,715Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:43,728Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:43,732Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:43,737Z [MockNode-11-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:44,196Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:44,202Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:44,204Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:44,206Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:44,213Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:44,215Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:44,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:44,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:44,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:44,222Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:44,490Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174241.260\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:42:44,491Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174241.260/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:44,492Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174241.260/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:44,518Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:44,533Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:44,590Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:44,590Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:44,590Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:44,594Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:41.260Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:44,954Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:44,956Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174241.260\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:44,956Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:44,957Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:44,963Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:44,964Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:45,015Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:45,027Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:45,030Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:45,031Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:45,052Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:45,052Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:45,115Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:45,123Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:45,123Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,125Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:45,129Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,156Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:45,160Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,164Z [MockNode-12-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:45,361Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:45,365Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,368Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174162344) {}
[INFO ] 2019-09-22T17:42:45,369Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:45,375Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,376Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:45,384Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174163710) {}
[INFO ] 2019-09-22T17:42:45,385Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:45,390Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,391Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:45,399Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,399Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:45,399Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174165123) {}
[INFO ] 2019-09-22T17:42:45,399Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:42:45,403Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543}
[WARN ] 2019-09-22T17:42:45,406Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543}
[WARN ] 2019-09-22T17:42:46,209Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543}
[WARN ] 2019-09-22T17:42:46,211Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543}
[WARN ] 2019-09-22T17:42:46,212Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543}
[WARN ] 2019-09-22T17:42:46,217Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543}
[WARN ] 2019-09-22T17:42:46,233Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543}
[WARN ] 2019-09-22T17:42:46,237Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,237Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,237Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,250Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,288Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[WARN ] 2019-09-22T17:42:46,288Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,297Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[WARN ] 2019-09-22T17:42:46,300Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,315Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,315Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000007, flow-id=665fd483-31cf-42c1-9d35-82f54a619c70, invocation_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, invocation_timestamp=2019-09-22T17:42:45.400Z, origin=Only For Testing, session_id=fe006a5a-96b3-4e95-8280-a36c87d144c3, session_timestamp=2019-09-22T17:42:45.400Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,322Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:46,323Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7c83779b, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=7bcf0e05-e76d-43ac-88cd-25e2a523764c) {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[INFO ] 2019-09-22T17:42:46,323Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] has error [0] {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:46,323Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] error allowed to propagate {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[WARN ] 2019-09-22T17:42:46,326Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] errored, dumping all transitions:

 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.281Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D9CE50E748EFA2936BD6F7611AC46E3D265664FADEA2AF6A8D8198832482C498), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4960cc42])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4960cc42])
    SignalFlowHasStarted(flowId=[9e5111b3-7bc7-4105-95be-c7d0971334c5])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=941562512316024821), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4274706024028473847), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-941562512316024821--3977038441181794268-0-0), senderUUID=7bcf0e05-e76d-43ac-88cd-25e2a523764c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4274706024028473847): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4960cc42]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.281Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.283Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.284Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), maySkipCheckpoint=false, fiber=E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985, )
  Actions: 
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D9CE50E748EFA2936BD6F7611AC46E3D265664FADEA2AF6A8D8198832482C498)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.284Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4274706024028473847).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.288Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.294Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA, )
  Actions: 
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985
    2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.296Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=941562512316024821), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-941562512316024821--3977038441181794268-2-0), senderUUID=7bcf0e05-e76d-43ac-88cd-25e2a523764c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.296Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.300Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.304Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), maySkipCheckpoint=false, fiber=13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B, )
  Actions: 
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA
    13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.309Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.321Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4274706024028473847), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4274706024028473847).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=941562512316024821))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.322Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.322Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.323Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2499245560218455265, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.323Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.323Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[WARN ] 2019-09-22T17:42:46,327Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:42:46,328Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[WARN ] 2019-09-22T17:42:46,336Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] errored, dumping all transitions:

 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.281Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=D9CE50E748EFA2936BD6F7611AC46E3D265664FADEA2AF6A8D8198832482C498), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4960cc42])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4960cc42])
    SignalFlowHasStarted(flowId=[9e5111b3-7bc7-4105-95be-c7d0971334c5])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=941562512316024821), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-4274706024028473847), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-941562512316024821--3977038441181794268-0-0), senderUUID=7bcf0e05-e76d-43ac-88cd-25e2a523764c))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4274706024028473847): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4960cc42]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.281Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.283Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.284Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), maySkipCheckpoint=false, fiber=E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985, )
  Actions: 
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=D9CE50E748EFA2936BD6F7611AC46E3D265664FADEA2AF6A8D8198832482C498)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.284Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4274706024028473847).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.288Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.294Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA, )
  Actions: 
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    E3FA52D330B3F65FFD339191210870A8FDF764A4CA4F4AE296F03CDA2EF21985
    2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.296Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=941562512316024821), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-941562512316024821--3977038441181794268-2-0), senderUUID=7bcf0e05-e76d-43ac-88cd-25e2a523764c))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.296Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.300Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.304Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), maySkipCheckpoint=false, fiber=13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B, )
  Actions: 
    PersistCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=941562512316024821)), errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    2F3A37092F4FE3B57FF7C8CE98A2B4B5FCDACE81F97CB6B07249E0CE4D1B74FA
    13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.309Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.321Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-4274706024028473847), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-4274706024028473847).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=941562512316024821))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.322Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.322Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.323Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-2499245560218455265, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.323Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.323Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] ---
  Timestamp: 2019-09-22T17:42:46.334Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-2499245560218455265)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)], senderUUID=7bcf0e05-e76d-43ac-88cd-25e2a523764c)
    CreateTransaction
    RemoveCheckpoint(id=[9e5111b3-7bc7-4105-95be-c7d0971334c5])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b])
    ReleaseSoftLocks(uuid=9e5111b3-7bc7-4105-95be-c7d0971334c5)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-4274706024028473847)])
    RemoveFlow(flowId=[9e5111b3-7bc7-4105-95be-c7d0971334c5], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-2499245560218455265, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Invocation, sessionId=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, timestamp: 2019-09-22T17:42:46.273Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-4274706024028473847)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-941562512316024821--3977038441181794268)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-4274706024028473847))]), frozenFiber=13769128C1BE21BE4F92C8B25F0CC0EE492848D42DA02DD13A5B9BA4C2BCED5B), errorState=Errored(errors=[FlowError(errorId=-2499245560218455265, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@7c83779b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=7bcf0e05-e76d-43ac-88cd-25e2a523764c))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2f7d8b9b]
    []
 {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
[WARN ] 2019-09-22T17:42:46,336Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [9e5111b3-7bc7-4105-95be-c7d0971334c5] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000008, flow-id=9e5111b3-7bc7-4105-95be-c7d0971334c5, invocation_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, invocation_timestamp=2019-09-22T17:42:46.273Z, origin=O=Mock Company 1, L=London, C=GB, session_id=bf9028e5-07fc-4cdf-935a-7dc9a95d779a, session_timestamp=2019-09-22T17:42:46.273Z, thread-id=543, tx_id=2F86C0EF6ACAA777D9D34AB275A3CA3B4AA04ED36A32A08A8A9B79D42DC668EC}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-4274706024028473847) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:46,458Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174246.349\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:42:46,459Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174246.349/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:46,459Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174246.349/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:46,700Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:46,729Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:46,752Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:46,752Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:46,752Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:46,763Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:46.349Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:47,133Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:47,134Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174246.349\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:47,134Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:47,136Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:47,138Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:47,138Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:47,195Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:47,212Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:47,236Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:47,244Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:47,245Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:47,354Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:47,360Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:47,360Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:47,362Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:47,370Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:47,383Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:47,386Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:47,390Z [MockNode-13-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:47,824Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:47,840Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:42:47,840Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:42:47,846Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:47,848Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:47,848Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:47,848Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:47,848Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:47,873Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174246.349\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:42:47,873Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174246.349/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:47,873Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174246.349/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:48,168Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:48,211Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:48,273Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:48,273Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:48,273Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:48,277Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:46.349Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:48,579Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:48,581Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174246.349\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:48,581Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:48,584Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:48,589Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:48,590Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:48,656Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:48,664Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:48,668Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:48,668Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:48,690Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:48,690Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:48,770Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:48,779Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:48,779Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:48,780Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:48,783Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:48,798Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:48,800Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:48,804Z [MockNode-14-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:49,243Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:49,249Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:49,251Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:49,252Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:49,259Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:49,260Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:49,265Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:49,265Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:49,265Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:49,265Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:49,441Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174246.349\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:42:49,443Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174246.349/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:49,443Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174246.349/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:49,468Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:49,502Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:49,563Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:49,563Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:49,563Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:49,567Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:46.349Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:49,912Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:49,914Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174246.349\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:49,914Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:49,916Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:49,918Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:49,918Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:49,968Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:49,978Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:49,981Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:49,981Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:49,996Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:49,996Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:50,062Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:50,076Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:50,076Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,078Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:50,082Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,091Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:50,096Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,098Z [MockNode-15-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:50,524Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:50,532Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,534Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174167360) {}
[INFO ] 2019-09-22T17:42:50,535Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:50,541Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,542Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:50,547Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174168779) {}
[INFO ] 2019-09-22T17:42:50,549Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:50,554Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,555Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:50,559Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,559Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:50,559Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174170076) {}
[INFO ] 2019-09-22T17:42:50,560Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:42:50,563Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674}
[WARN ] 2019-09-22T17:42:50,566Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674}
[WARN ] 2019-09-22T17:42:51,059Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674}
[WARN ] 2019-09-22T17:42:51,061Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674}
[WARN ] 2019-09-22T17:42:51,062Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674}
[WARN ] 2019-09-22T17:42:51,065Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674}
[WARN ] 2019-09-22T17:42:51,076Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674}
[WARN ] 2019-09-22T17:42:51,078Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,078Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,078Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,088Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,117Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[WARN ] 2019-09-22T17:42:51,117Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,126Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[WARN ] 2019-09-22T17:42:51,129Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,139Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,139Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000009, flow-id=32f132ba-845c-408b-a80c-6c83ae23c0b5, invocation_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, invocation_timestamp=2019-09-22T17:42:50.561Z, origin=Only For Testing, session_id=46079b7d-cf6a-4391-9e88-d1f0753ae83c, session_timestamp=2019-09-22T17:42:50.561Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,146Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:51,147Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [6023c355-2d1e-4722-9f55-9e4845c12381] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@65ede011, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=1f14ec12-a2d2-476a-9e2c-2bc87057c3a3) {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[INFO ] 2019-09-22T17:42:51,147Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [6023c355-2d1e-4722-9f55-9e4845c12381] has error [0] {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:51,147Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [6023c355-2d1e-4722-9f55-9e4845c12381] error allowed to propagate {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[WARN ] 2019-09-22T17:42:51,151Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6023c355-2d1e-4722-9f55-9e4845c12381] errored, dumping all transitions:

 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.112Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=13468C72A9EE9A88F277827398C7D99A9F345C10C7A2DDBFFF7913A3AD5CA095), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f3178b6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f3178b6])
    SignalFlowHasStarted(flowId=[6023c355-2d1e-4722-9f55-9e4845c12381])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8967854005713615301), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-178799731523505087), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8967854005713615301--1707266159090055018-0-0), senderUUID=1f14ec12-a2d2-476a-9e2c-2bc87057c3a3))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-178799731523505087): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f3178b6]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.113Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.113Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.115Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), maySkipCheckpoint=false, fiber=A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA, )
  Actions: 
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=13468C72A9EE9A88F277827398C7D99A9F345C10C7A2DDBFFF7913A3AD5CA095)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.116Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-178799731523505087).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.118Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.123Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27, )
  Actions: 
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA
    60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.126Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8967854005713615301), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8967854005713615301--1707266159090055018-2-0), senderUUID=1f14ec12-a2d2-476a-9e2c-2bc87057c3a3))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.126Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.129Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.133Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), maySkipCheckpoint=false, fiber=0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139, )
  Actions: 
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27
    0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.133Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.146Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-178799731523505087), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-178799731523505087).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8967854005713615301))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.146Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.146Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.147Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4977879968513271733, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.147Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.147Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[WARN ] 2019-09-22T17:42:51,151Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6023c355-2d1e-4722-9f55-9e4845c12381] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:42:51,152Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[WARN ] 2019-09-22T17:42:51,162Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6023c355-2d1e-4722-9f55-9e4845c12381] errored, dumping all transitions:

 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.112Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=13468C72A9EE9A88F277827398C7D99A9F345C10C7A2DDBFFF7913A3AD5CA095), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f3178b6])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f3178b6])
    SignalFlowHasStarted(flowId=[6023c355-2d1e-4722-9f55-9e4845c12381])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8967854005713615301), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-178799731523505087), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8967854005713615301--1707266159090055018-0-0), senderUUID=1f14ec12-a2d2-476a-9e2c-2bc87057c3a3))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-178799731523505087): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@f3178b6]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.113Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.113Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.115Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), maySkipCheckpoint=false, fiber=A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA, )
  Actions: 
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=13468C72A9EE9A88F277827398C7D99A9F345C10C7A2DDBFFF7913A3AD5CA095)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.116Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-178799731523505087).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.118Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.123Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27, )
  Actions: 
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    A65AD3197AEE4EC2A2859CC9FE61B10FF32E2F3410551EE04AAB8729BA6164BA
    60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.126Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=8967854005713615301), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-8967854005713615301--1707266159090055018-2-0), senderUUID=1f14ec12-a2d2-476a-9e2c-2bc87057c3a3))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.126Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.129Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.133Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), maySkipCheckpoint=false, fiber=0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139, )
  Actions: 
    PersistCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=8967854005713615301)), errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    60C32BC56E990AB85391E7B64887B489807B440F5A0E4B3AF8C28DCD5CC78A27
    0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.133Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.146Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-178799731523505087), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-178799731523505087).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=8967854005713615301))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.146Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.146Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.147Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4977879968513271733, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.147Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.147Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [6023c355-2d1e-4722-9f55-9e4845c12381] ---
  Timestamp: 2019-09-22T17:42:51.160Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-4977879968513271733)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)], senderUUID=1f14ec12-a2d2-476a-9e2c-2bc87057c3a3)
    CreateTransaction
    RemoveCheckpoint(id=[6023c355-2d1e-4722-9f55-9e4845c12381])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb])
    ReleaseSoftLocks(uuid=6023c355-2d1e-4722-9f55-9e4845c12381)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-178799731523505087)])
    RemoveFlow(flowId=[6023c355-2d1e-4722-9f55-9e4845c12381], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4977879968513271733, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Invocation, sessionId=70c49fa2-a27e-4e5d-9c04-83de6e822063, timestamp: 2019-09-22T17:42:51.104Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-178799731523505087)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-8967854005713615301--1707266159090055018)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-178799731523505087))]), frozenFiber=0D777824327431801A93B378336AC6667093396FFE92AD9A7D7985A15C52B139), errorState=Errored(errors=[FlowError(errorId=-4977879968513271733, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@65ede011, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=1f14ec12-a2d2-476a-9e2c-2bc87057c3a3))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@134ed2bb]
    []
 {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
[WARN ] 2019-09-22T17:42:51,162Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [6023c355-2d1e-4722-9f55-9e4845c12381] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000010, flow-id=6023c355-2d1e-4722-9f55-9e4845c12381, invocation_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, invocation_timestamp=2019-09-22T17:42:51.104Z, origin=O=Mock Company 1, L=London, C=GB, session_id=70c49fa2-a27e-4e5d-9c04-83de6e822063, session_timestamp=2019-09-22T17:42:51.104Z, thread-id=674, tx_id=10E62D69AC0FE2707F370A9BBAF97B5BC1B205A49719C6503E7C5E12C9FF1C15}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-178799731523505087) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:51,258Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174251.177\nodes\0\cordapps] {}
[INFO ] 2019-09-22T17:42:51,259Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174251.177/nodes/0/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:51,259Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174251.177/nodes/0/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:51,514Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:51,528Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:51,550Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:51,551Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:51,552Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:51,560Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:51.177Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:51,941Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:51,943Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174251.177\nodes\0\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:51,943Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:51,945Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:51,948Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:51,949Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:52,012Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:52,019Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:52,047Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:52,055Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:52,055Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:52,126Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2019-09-22T17:42:52,133Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:52,134Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:52,135Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:52,143Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:52,155Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:52,160Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:52,164Z [MockNode-16-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:52,511Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:52,514Z [Test worker] utilities.NotaryLoader.loadService - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2019-09-22T17:42:52,514Z [Test worker] notary.SinglePartyNotaryService.<init> - Starting notary in validating mode {}
[INFO ] 2019-09-22T17:42:52,518Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:52,520Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:52,520Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:52,520Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:52,520Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:52,549Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174251.177\nodes\1\cordapps] {}
[INFO ] 2019-09-22T17:42:52,550Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174251.177/nodes/1/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:52,551Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174251.177/nodes/1/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:52,750Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:52,763Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:52,822Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:52,823Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:52,823Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:52,826Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:51.177Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:53,128Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:53,130Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174251.177\nodes\1\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:53,130Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:53,131Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:53,135Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:53,136Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:53,197Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:53,201Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:53,206Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:53,207Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:53,228Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:53,228Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:53,282Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:53,289Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:53,289Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:53,290Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:53,294Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:53,305Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:53,308Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:53,313Z [MockNode-17-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:53,796Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:53,801Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:53,803Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:53,804Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:53,810Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:53,811Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:53,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:53,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:53,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:53,817Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:53,844Z [Test worker] cordapp.JarScanningCordappLoader.fromDirectories - Looking for CorDapps in [build\mock-network\20190922-174251.177\nodes\2\cordapps] {}
[INFO ] 2019-09-22T17:42:53,845Z [Test worker] cordapp.JarScanningCordappLoader.<init> - Loading CorDapps from RestrictedURL(url=file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174251.177/nodes/2/cordapps/bootcamp-cordapp-4.jar, rootPackageName=null) {}
[INFO ] 2019-09-22T17:42:53,846Z [Test worker] cordapp.JarScanningCordappLoader.scanCordapp - Scanning CorDapp in file:/C:/Users/adnanahmed/Documents/bootcamp-cordapp-4/build/mock-network/20190922-174251.177/nodes/2/cordapps/bootcamp-cordapp-4.jar {}
[INFO ] 2019-09-22T17:42:54,125Z [Test worker] cordapp.JarScanningCordappLoader.findNotaryService - Found notary service CorDapp implementations:  {}
[INFO ] 2019-09-22T17:42:54,136Z [Test worker] internal.InternalMockNetwork$MockNode.start - Node starting up ... {}
[INFO ] 2019-09-22T17:42:54,197Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:54,197Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:54,197Z [Test worker] internal.NodeFlowManager.registerInitiatedFlow - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2019-09-22T17:42:54,203Z [Test worker] internal.InternalMockNetwork$MockNode.start - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2019-09-22T17:42:51.177Z
      epoch=1
  } {}
[INFO ] 2019-09-22T17:42:54,524Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Start executing... {}
[INFO ] 2019-09-22T17:42:54,525Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20190922-174251.177\nodes\2\network-parameters, whitelistedContractImplementations: {}. {}
[INFO ] 2019-09-22T17:42:54,525Z [Test worker] persistence.AttachmentVersionNumberMigration.execute - Attachment version creation from whitelisted JARs skipped, no attachments not found. {}
[INFO ] 2019-09-22T17:42:54,526Z [Test worker] migration.VaultStateMigration.execute - Migrating vault state data to V4 tables {}
[INFO ] 2019-09-22T17:42:54,528Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:54,528Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:54,557Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {}
[INFO ] 2019-09-22T17:42:54,573Z [Test worker] migration.VaultStateMigration.execute - Finished performing vault state data migration for 0 states {}
[INFO ] 2019-09-22T17:42:54,576Z [Test worker] internal.InternalMockNetwork$MockNode.invoke - Connected to H2 database. {}
[INFO ] 2019-09-22T17:42:54,576Z [Test worker] internal.InternalMockNetwork$MockNode.obtainIdentity - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2019-09-22T17:42:54,595Z [Test worker] persistence.HibernateConfiguration.<init> - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:54,595Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:54,648Z [Test worker] persistence.HibernateConfiguration.makeSessionFactoryForSchemas - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2019-09-22T17:42:54,656Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2019-09-22T17:42:54,656Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:54,657Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:54,660Z [Test worker] internal.InternalMockNetwork$MockNode.updateNodeInfo - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:54,692Z [Test worker] network.NetworkMapUpdater.start - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2019-09-22T17:42:54,701Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:54,709Z [MockNode-18-2] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:55,172Z [Test worker] persistence.NodeAttachmentService.invoke - Stored new attachment: id=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93 uploader=app filename=null {}
[INFO ] 2019-09-22T17:42:55,177Z [Test worker] statemachine.SingleThreadedStateMachineManager.invoke - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:55,179Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=4, serial=1569174172134) {}
[INFO ] 2019-09-22T17:42:55,181Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:55,187Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:55,188Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:55,195Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=4, serial=1569174173289) {}
[INFO ] 2019-09-22T17:42:55,196Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:55,200Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:55,202Z [Test worker] network.PersistentNetworkMapCache.addNode - No previous node found {}
[INFO ] 2019-09-22T17:42:55,206Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:55,206Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2019-09-22T17:42:55,206Z [Test worker] network.PersistentNetworkMapCache.addNode - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=4, serial=1569174174656) {}
[INFO ] 2019-09-22T17:42:55,206Z [Test worker] network.PersistentNetworkMapCache.addNode - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2019-09-22T17:42:55,212Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805}
[WARN ] 2019-09-22T17:42:55,215Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805}
[WARN ] 2019-09-22T17:42:55,702Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805}
[WARN ] 2019-09-22T17:42:55,704Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805}
[WARN ] 2019-09-22T17:42:55,705Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805}
[WARN ] 2019-09-22T17:42:55,709Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805}
[WARN ] 2019-09-22T17:42:55,717Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805}
[WARN ] 2019-09-22T17:42:55,721Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,723Z [Mock network] corda.flow.notariseAndRecord - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,723Z [Mock network] corda.flow.notariseAndRecord - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,733Z [Mock network] corda.flow.notariseAndRecord - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,759Z [Mock network] corda.flow.call - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[WARN ] 2019-09-22T17:42:55,760Z [Mock network] corda.flow.maybeWireUpProgressTracking - ProgressTracker has not been started {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,766Z [Mock network] corda.flow.call - Transaction dependencies resolution completed. {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[WARN ] 2019-09-22T17:42:55,770Z [Mock network] contracts.TransactionState.<init> - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,778Z [Mock network] corda.flow.call - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,778Z [Mock network] corda.flow.call - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000011, flow-id=04d8a4ec-e467-4a76-8c87-c17273e7e08e, invocation_id=9801ef16-c516-4c69-aa20-f664624cecba, invocation_timestamp=2019-09-22T17:42:55.208Z, origin=Only For Testing, session_id=9801ef16-c516-4c69-aa20-f664624cecba, session_timestamp=2019-09-22T17:42:55.208Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,783Z [Mock network] corda.flow.run - Flow raised an error... sending it to flow hospital {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:55,784Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [b7b74e94-172d-47a2-83a5-3a77409259e2] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@30b0256b, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=a2ba8f73-2521-46ee-830f-84a8b70f5b83) {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[INFO ] 2019-09-22T17:42:55,784Z [Mock network] statemachine.StaffedFlowHospital.invoke - Flow [b7b74e94-172d-47a2-83a5-3a77409259e2] has error [0] {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[INFO ] 2019-09-22T17:42:55,784Z [Mock network] statemachine.StaffedFlowHospital.flowErrored - Flow [b7b74e94-172d-47a2-83a5-3a77409259e2] error allowed to propagate {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[WARN ] 2019-09-22T17:42:55,788Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b7b74e94-172d-47a2-83a5-3a77409259e2] errored, dumping all transitions:

 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.755Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=DECB8EF86B8B34CE70275417A5E17C47CCC834E98E22EAC8D06708C18F6F5228), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4598b95d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4598b95d])
    SignalFlowHasStarted(flowId=[b7b74e94-172d-47a2-83a5-3a77409259e2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3643989482315901555), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1807551408902648891), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3643989482315901555-3321199674211114868-0-0), senderUUID=a2ba8f73-2521-46ee-830f-84a8b70f5b83))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1807551408902648891): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4598b95d]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.756Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.756Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.758Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), maySkipCheckpoint=false, fiber=17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422, )
  Actions: 
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=DECB8EF86B8B34CE70275417A5E17C47CCC834E98E22EAC8D06708C18F6F5228)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.758Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1807551408902648891).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.760Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.764Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73, )
  Actions: 
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422
    26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.766Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3643989482315901555), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3643989482315901555-3321199674211114868-2-0), senderUUID=a2ba8f73-2521-46ee-830f-84a8b70f5b83))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.766Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.770Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.772Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), maySkipCheckpoint=false, fiber=AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095, )
  Actions: 
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73
    AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.772Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.783Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1807551408902648891), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1807551408902648891).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.783Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.783Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.784Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2172810768569981667, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.784Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.784Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[WARN ] 2019-09-22T17:42:55,788Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b7b74e94-172d-47a2-83a5-3a77409259e2] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
[WARN ] 2019-09-22T17:42:55,788Z [Mock network] statemachine.ActionExecutorImpl.executePropagateErrors - Propagating error {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[WARN ] 2019-09-22T17:42:55,797Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b7b74e94-172d-47a2-83a5-3a77409259e2] errored, dumping all transitions:

 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.755Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=DECB8EF86B8B34CE70275417A5E17C47CCC834E98E22EAC8D06708C18F6F5228), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4598b95d])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4598b95d])
    SignalFlowHasStarted(flowId=[b7b74e94-172d-47a2-83a5-3a77409259e2])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3643989482315901555), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1807551408902648891), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3643989482315901555-3321199674211114868-0-0), senderUUID=a2ba8f73-2521-46ee-830f-84a8b70f5b83))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1807551408902648891): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4598b95d]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.756Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.756Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.758Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), maySkipCheckpoint=false, fiber=17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422, )
  Actions: 
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=DECB8EF86B8B34CE70275417A5E17C47CCC834E98E22EAC8D06708C18F6F5228)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.758Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1807551408902648891).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.760Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.764Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73, )
  Actions: 
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    17307D3E78631E7C71745E39276E75985FA28692A2514EA4B95B0750ED25C422
    26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))])
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.766Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3643989482315901555), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--3643989482315901555-3321199674211114868-2-0), senderUUID=a2ba8f73-2521-46ee-830f-84a8b70f5b83))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.766Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.770Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.772Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), maySkipCheckpoint=false, fiber=AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095, )
  Actions: 
    PersistCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555)), errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.frozenFiber.hash: 
    26B888F0F52A4408E3FC6E6886C35BF6CF84DB45AA8F13C7DB6A3F6513D27E73
    AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))])
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.772Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.783Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1807551408902648891), payload=net.corda.node.services.statemachine.EndSessionMessage@7bebe1e6), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1807551408902648891).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-3643989482315901555))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.783Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.783Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=4), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)]


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.784Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2172810768569981667, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.784Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.784Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [b7b74e94-172d-47a2-83a5-3a77409259e2] ---
  Timestamp: 2019-09-22T17:42:55.795Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2172810768569981667)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)], senderUUID=a2ba8f73-2521-46ee-830f-84a8b70f5b83)
    CreateTransaction
    RemoveCheckpoint(id=[b7b74e94-172d-47a2-83a5-3a77409259e2])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0])
    ReleaseSoftLocks(uuid=b7b74e94-172d-47a2-83a5-3a77409259e2)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=1807551408902648891)])
    RemoveFlow(flowId=[b7b74e94-172d-47a2-83a5-3a77409259e2], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2172810768569981667, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Invocation, sessionId=daf0af18-9b61-4075-b584-bc3f06e30f6d, timestamp: 2019-09-22T17:42:55.749Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1807551408902648891)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--3643989482315901555-3321199674211114868)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=4, corDappName=bootcamp-cordapp-4, corDappHash=F4FF4A695B1B1D25DDBDF152094A5C5FD8FC60CCF1A8D79E8B1105116CD7CD93), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(counterparty=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1807551408902648891))]), frozenFiber=AB7EF55FA5AACDE30BBF1B31AF3C0E3C560B298EC9AD2BE2188E85838B96B095), errorState=Errored(errors=[FlowError(errorId=2172810768569981667, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@30b0256b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=a2ba8f73-2521-46ee-830f-84a8b70f5b83))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@11206fc0]
    []
 {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
[WARN ] 2019-09-22T17:42:55,797Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor.executeTransition - Flow [b7b74e94-172d-47a2-83a5-3a77409259e2] error [errorCode=13t7p1u, moreInformationAt=https://errors.corda.net/OS/4.0/13t7p1u] {fiber-id=10000012, flow-id=b7b74e94-172d-47a2-83a5-3a77409259e2, invocation_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, invocation_timestamp=2019-09-22T17:42:55.749Z, origin=O=Mock Company 1, L=London, C=GB, session_id=daf0af18-9b61-4075-b584-bc3f06e30f6d, session_timestamp=2019-09-22T17:42:55.749Z, thread-id=805, tx_id=4373FFD36EC90FFCD85B4641FF88B55112B96C2E3950078FEE6CA35E1DA9F4D9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1807551408902648891) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:161) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:407) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:294) ~[corda-core-4.0.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:198) ~[corda-core-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:290) ~[corda-node-4.0.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:314) ~[corda-core-4.0.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:228) ~[corda-node-4.0.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:45) ~[corda-node-4.0.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_161]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_161]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_161]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_161]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.0.jar:?]
